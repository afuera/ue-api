<android.widget.CalendarView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.view.SurfaceControl: android.os.IBinder createDisplay(java.lang.String,boolean)>
<android.view.SurfaceControl: void destroyDisplay(android.os.IBinder)>
<android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface,android.graphics.Rect,int,int,boolean,int)>
<android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface)>
<android.view.SurfaceControl: android.graphics.Bitmap screenshot(android.graphics.Rect,int,int,boolean,int)>
<android.view.SurfaceControl: android.graphics.Bitmap screenshot(android.graphics.Rect,int,int,int)>
<android.view.ViewTreeObserver: void addOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>
<android.widget.TextView: void onAttachedToWindow()>
<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>
<android.widget.AbsListView: void onDetachedFromWindow()>
<android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)>
<android.widget.Editor$HandleView: void positionAtCursorOffset(int,boolean,boolean)>
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.TextView: void setCursorVisible(boolean)>
<android.widget.TextView: void setEnabled(boolean)>
<android.widget.TextView: void setTextIsSelectable(boolean)>
<android.widget.TextView: void makeNewLayout(int,int,android.text.BoringLayout$Metrics,android.text.BoringLayout$Metrics,int,boolean)>
<android.view.ViewTreeObserver: void addOnComputeInternalInsetsListener(android.view.ViewTreeObserver$OnComputeInternalInsetsListener)>
<android.view.ViewTreeObserver: void removeOnComputeInternalInsetsListener(android.view.ViewTreeObserver$OnComputeInternalInsetsListener)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.widget.ActivityChooserView: boolean showPopup()>
<android.widget.ActivityChooserView: void setActivityChooserModel(android.widget.ActivityChooserModel)>
<android.widget.AbsListView: void setFilterText(java.lang.String)>
<android.widget.AbsListView: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.AbsListView: void onWindowFocusChanged(boolean)>
<android.widget.AbsListView: void onGlobalLayout()>
<android.widget.PopupWindow: void showAtLocation(android.os.IBinder,int,int,int)>
<android.widget.PopupWindow: void showAsDropDown(android.view.View,int,int,int)>
<android.widget.AbsListView: void onAttachedToWindow()>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.widget.TextView: void onMeasure(int,int)>
<android.widget.TextView: void setGravity(int)>
<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View,int)>
<android.animation.LayoutTransition: void addChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void layoutChange(android.view.ViewGroup)>
<android.view.ViewGroup: void layout(int,int,int,int)>
<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View,int)>
<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,android.transition.Transition)>
<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>
<android.transition.TransitionManager: void go(android.transition.Scene)>
<android.transition.TransitionManager: void transitionTo(android.transition.Scene)>
<android.transition.TransitionManager: void go(android.transition.Scene,android.transition.Transition)>
<android.widget.Editor$HandleView: void show()>
<android.view.ViewTreeObserver: void addOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>
<android.widget.ListPopupWindow: void show()>
<android.widget.PopupWindow: void update(android.view.View,int,int,int,int)>
<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>
<android.widget.Editor: boolean performLongClick(boolean)>
<android.widget.TextView: boolean onPreDraw()>
<android.widget.Editor: void endBatchEdit()>
<android.widget.TextView: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.TextView: boolean performLongClick()>
<android.view.ViewTreeObserver: void removeOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>
<android.view.ViewTreeObserver: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.widget.ActivityChooserView: boolean dismissPopup()>
<android.widget.ShareActionProvider: android.view.View onCreateActionView()>
<android.widget.ActivityChooserView: void onLayout(boolean,int,int,int,int)>
<android.widget.ActivityChooserView: void onDetachedFromWindow()>
<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.widget.Editor$HandleView: void hide()>
<android.view.ViewTreeObserver: void removeOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>
<android.widget.PopupWindow: void dismiss()>
<android.widget.Editor$HandleView: void dismiss()>
<android.widget.ListPopupWindow: void dismiss()>
<android.widget.Editor: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)>
<android.view.ViewRootImpl: void requestLayout()>
<android.view.ViewRootImpl: void requestTransparentRegion(android.view.View)>
<android.view.ViewRootImpl: void updateConfiguration(int)>
<android.view.ViewRootImpl: void clearChildFocus(android.view.View)>
<android.view.ViewRootImpl: android.view.View focusSearch(android.view.View,int)>
<android.view.ViewRootImpl: void focusableViewAvailable(android.view.View)>
<android.view.ViewRootImpl: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>
<android.view.ViewRootImpl: void invalidateChild(android.view.View,android.graphics.Rect)>
<android.view.ViewRootImpl: void recomputeViewAttributes(android.view.View)>
<android.view.ViewRootImpl: void requestChildFocus(android.view.View,android.view.View)>
<android.view.ViewRootImpl: void requestFitSystemWindows()>
<android.view.ViewRootImpl: void playSoundEffect(int)>
<android.view.ViewRootImpl: android.view.AccessibilityInteractionController getAccessibilityInteractionController()>
<android.view.ViewRootImpl: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>
<android.hardware.usb.UsbAccessory: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.hardware.usb.IUsbSerialReader)>
<android.widget.TextView: boolean onTextContextMenuItem(int)>
<android.view.accessibility.AccessibilityNodeInfo: boolean refresh(android.os.Bundle,boolean)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void recycle()>
<android.net.nsd.NsdManager: void registerService(android.net.nsd.NsdServiceInfo,int,android.net.nsd.NsdManager$RegistrationListener)>
<android.content.pm.PackageItemInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
<android.app.ApplicationPackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$OpenParams)>
<android.net.nsd.NsdManager: void discoverServices(java.lang.String,int,android.net.nsd.NsdManager$DiscoveryListener)>
<android.app.admin.DevicePolicyManager: void wipeData(int,java.lang.CharSequence)>
<android.print.PrintAttributes$MediaSize: void <init>(java.lang.String,java.lang.String,java.lang.String,int,int,int)>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize asPortrait()>
<android.print.PrintAttributes$MediaSize: void <init>(java.lang.String,java.lang.String,int,int,int)>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize asLandscape()>
<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)>
<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int,boolean)>
<android.text.style.TextAppearanceSpan: void updateMeasureState(android.text.TextPaint)>
<android.content.ContentValues: void <init>(int)>
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)>
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)>
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,java.lang.String,java.lang.String,int,int,int,android.telecom.PhoneAccountHandle,long,int,java.lang.Long,boolean,android.os.UserHandle,boolean,int,java.lang.CharSequence,java.lang.String)>
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,int,android.telecom.PhoneAccountHandle,long,int,java.lang.Long)>
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,java.lang.String,java.lang.String,int,int,int,android.telecom.PhoneAccountHandle,long,int,java.lang.Long,boolean,android.os.UserHandle)>
<android.view.View: boolean computeFitSystemWindows(android.graphics.Rect,android.graphics.Rect)>
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.mtp.MtpDevice: byte[] getObject(int,int)>
<android.hardware.usb.UsbDeviceConnection: android.hardware.usb.UsbRequest requestWait(long)>
<android.content.ContentProviderResult: void <init>(android.net.Uri)>
<android.location.LocationManager: void <init>(android.content.Context,android.location.ILocationManager)>
<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.io.File)>
<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>
<android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,int,android.database.DatabaseErrorHandler)>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>
<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)>
<android.app.ActivityThread: android.app.ActivityThread systemMain()>
<android.app.ActivityThread: void main(java.lang.String[])>
<android.telephony.PhoneStateListener: void <init>(java.lang.Integer,android.os.Looper)>
<android.net.wifi.WifiConfiguration: void <init>()>
<android.content.ClipboardManager: void setPrimaryClip(android.content.ClipData)>
<android.mtp.MtpDevice: void <init>(android.hardware.usb.UsbDevice)>
<android.text.InputFilter$AllCaps: void <init>(java.util.Locale)>
<android.app.ApplicationPackageManager: int movePackage(java.lang.String,android.os.storage.VolumeInfo)>
<android.os.storage.StorageVolume: void <init>(java.lang.String,java.io.File,java.io.File,java.lang.String,boolean,boolean,boolean,boolean,long,android.os.UserHandle,java.lang.String,java.lang.String)>
<android.mtp.MtpServer: void <init>(android.mtp.MtpDatabase,java.io.FileDescriptor,boolean,java.lang.Runnable,java.lang.String,java.lang.String,java.lang.String)>
<android.view.ViewRootImpl: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>
<android.net.NetworkPolicy: void <init>(android.net.NetworkTemplate,android.util.RecurrenceRule,long,long,long,long,long,boolean,boolean)>
<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>
<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>
<android.view.animation.DecelerateInterpolator: void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet)>
<android.view.animation.OvershootInterpolator: void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet)>
<android.view.animation.AccelerateInterpolator: void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet)>
<android.view.animation.AnticipateInterpolator: void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet)>
<android.view.animation.CycleInterpolator: void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet)>
<android.view.animation.AnticipateOvershootInterpolator: void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet)>
<android.content.res.AssetManager: void <init>()>
<android.media.Ringtone: int getStreamType()>
<android.media.Ringtone: void play()>
<android.print.PrinterInfo$Builder: void <init>(android.print.PrinterId,java.lang.String,int)>
<android.net.nsd.NsdManager: void resolveService(android.net.nsd.NsdServiceInfo,android.net.nsd.NsdManager$ResolveListener)>
<android.net.ConnectivityManager: void <init>(android.content.Context,android.net.IConnectivityManager)>
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>
<android.content.ContentResolver: android.net.Uri uncanonicalize(android.net.Uri)>
<android.content.ContentResolver: void takePersistableUriPermission(java.lang.String,android.net.Uri,int)>
<android.content.ContentResolver: void takePersistableUriPermission(android.net.Uri,int)>
<android.content.ContentResolver: void releasePersistableUriPermission(android.net.Uri,int)>
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)>
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,int)>
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.content.ContentResolver: java.lang.String getType(android.net.Uri)>
<android.content.Intent: java.lang.String resolveType(android.content.ContentResolver)>
<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcastAsUser(android.content.Context,int,android.content.Intent,int,android.os.UserHandle)>
<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveActivityAsUser(android.content.Intent,int,int)>
<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int,android.os.Bundle)>
<android.app.ApplicationPackageManager: java.util.List queryIntentActivitiesAsUser(android.content.Intent,int,int)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)>
<android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.content.ClipData$Item: java.lang.CharSequence coerceToStyledText(android.content.Context)>
<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.ContentResolver: android.net.Uri canonicalize(android.net.Uri)>
<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(java.lang.String)>
<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri)>
<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(java.lang.String)>
<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri)>
<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.impl.CameraMetadataNative$Key)>
<android.print.PrintJobInfo$Builder: void putAdvancedOption(java.lang.String,java.lang.String)>
<android.text.style.LocaleSpan: void <init>(android.os.LocaleList)>
<android.os.storage.StorageManager: boolean unmountObb(java.lang.String,boolean,android.os.storage.OnObbStateChangeListener)>
<android.os.storage.StorageManager: boolean mountObb(java.lang.String,java.lang.String,android.os.storage.OnObbStateChangeListener)>
<android.os.storage.StorageManager: boolean isObbMounted(java.lang.String)>
<android.os.storage.StorageManager: java.lang.String getMountedObbPath(java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri setManageMode(android.net.Uri)>
<android.provider.DocumentsContract: boolean isManageMode(android.net.Uri)>
<android.provider.DocumentsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>
<android.provider.DocumentsContract: java.lang.String getSearchDocumentsQuery(android.os.Bundle)>
<android.printservice.PrintService: android.print.PrinterId generatePrinterId(java.lang.String)>
<android.hardware.usb.UsbRequest: boolean initialize(android.hardware.usb.UsbDeviceConnection,android.hardware.usb.UsbEndpoint)>
<android.hardware.usb.UsbRequest: boolean queue(java.nio.ByteBuffer)>
<android.mtp.MtpObjectInfo: int getCompressedSize()>
<android.mtp.MtpObjectInfo: int getThumbPixWidth()>
<android.mtp.MtpObjectInfo: int getThumbPixHeight()>
<android.mtp.MtpObjectInfo: int getThumbCompressedSize()>
<android.mtp.MtpObjectInfo: int getSequenceNumber()>
<android.mtp.MtpObjectInfo: int getImagePixWidth()>
<android.mtp.MtpObjectInfo: int getImagePixHeight()>
<android.mtp.MtpObjectInfo: int getImagePixDepth()>
<android.widget.RemoteViews: android.widget.RemoteViews clone()>
<android.widget.RemoteViews: java.lang.Object clone()>
<android.print.PrinterInfo$Builder: android.print.PrinterInfo$Builder setName(java.lang.String)>
<android.widget.LinearLayout: int getBaseline()>
<android.widget.LinearLayout: void onMeasure(int,int)>
<android.widget.LinearLayout: void setBaselineAlignedChildIndex(int)>
<android.widget.DialerFilter: void onFinishInflate()>
<android.view.textservice.SentenceSuggestionsInfo: void <init>(android.view.textservice.SuggestionsInfo[],int[],int[])>
<android.service.textservice.SpellCheckerService$Session: android.view.textservice.SentenceSuggestionsInfo[] onGetSentenceSuggestionsMultiple(android.view.textservice.TextInfo[],int)>
<android.view.textservice.SpellCheckerSession: void <init>(android.view.textservice.SpellCheckerInfo,android.view.textservice.TextServicesManager,android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener)>
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.os.Bundle,java.util.Locale,android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener,boolean)>
<android.widget.SpellChecker: void spellCheck(int,int)>
<android.widget.SpellChecker: void <init>(android.widget.TextView)>
<android.view.ViewTreeObserver: void dispatchOnGlobalLayout()>
<android.view.ViewTreeObserver: boolean dispatchOnPreDraw()>
<android.widget.GridLayout: void onSetLayoutParams(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.widget.CursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.view.FocusFinderHelper: int majorAxisDistance(int,android.graphics.Rect,android.graphics.Rect)>
<android.view.FocusFinderHelper: int majorAxisDistanceToFarEdge(int,android.graphics.Rect,android.graphics.Rect)>
<android.widget.EditText: void setEllipsize(android.text.TextUtils$TruncateAt)>
<android.view.Choreographer: void postCallbackDelayed(int,java.lang.Runnable,java.lang.Object,long)>
<android.view.Choreographer: void postCallback(int,java.lang.Runnable,java.lang.Object)>
<android.view.ViewRootImpl: void handleDispatchSystemUiVisibilityChanged(android.view.ViewRootImpl$SystemUiVisibilityInfo)>
<android.view.View: void postOnAnimation(java.lang.Runnable)>
<android.view.View: void postOnAnimationDelayed(java.lang.Runnable,long)>
<android.view.View: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.view.Choreographer: void postFrameCallbackDelayed(android.view.Choreographer$FrameCallback,long)>
<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>
<android.widget.TextView: void setSelected(boolean)>
<android.view.Choreographer: void removeCallbacks(int,java.lang.Runnable,java.lang.Object)>
<android.view.View: boolean removeCallbacks(java.lang.Runnable)>
<android.view.View: void onFocusLost()>
<android.view.View: void setSelected(boolean)>
<android.view.View: void onWindowFocusChanged(boolean)>
<android.view.View: void dispatchWindowFocusChanged(boolean)>
<android.webkit.WebView: void onWindowFocusChanged(boolean)>
<android.widget.TextView: void onWindowFocusChanged(boolean)>
<android.view.View: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.AbsListView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.TextView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.view.View: void cancelLongPress()>
<android.widget.TextView: void cancelLongPress()>
<android.view.View: void onCancelPendingInputEvents()>
<android.view.View: boolean onHoverEvent(android.view.MotionEvent)>
<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.widget.AbsListView: void onCancelPendingInputEvents()>
<android.widget.SpellChecker: void closeSession()>
<android.widget.AbsListView: boolean onInterceptHoverEvent(android.view.MotionEvent)>
<android.widget.AbsListView: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.AbsListView: void onTouchModeChanged(boolean)>
<android.widget.AbsListView: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.widget.AbsListView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)>
<android.view.ViewPropertyAnimator: void cancel()>
<android.widget.TextView: void onFocusChanged(boolean,int,android.graphics.Rect)>
<android.text.method.LinkMovementMethod: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.view.View: boolean performLongClick()>
<android.view.View: void onStartTemporaryDetach()>
<android.view.View: void dispatchStartTemporaryDetach()>
<android.widget.AbsListView: void onFocusChanged(boolean,int,android.graphics.Rect)>
<android.widget.ListView: void onFocusChanged(boolean,int,android.graphics.Rect)>
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>
<android.widget.AbsListView: void handleDataChanged()>
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.preference.PreferenceGroupAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.view.View: void setBackground(android.graphics.drawable.Drawable)>
<android.view.View: void setBackgroundColor(int)>
<android.view.View: void setBackgroundResource(int)>
<android.app.MediaRouteButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.app.MediaRouteButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AbsListView: void setSelector(android.graphics.drawable.Drawable)>
<android.widget.AbsListView: void onMeasure(int,int)>
<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>
<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ActivityChooserView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ActivityChooserView: void setExpandActivityOverflowButtonDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageResource(int)>
<android.widget.ImageView: void onMeasure(int,int)>
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.view.Choreographer: void removeFrameCallback(android.view.Choreographer$FrameCallback)>
<android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])>
<android.app.Instrumentation: void sendStringSync(java.lang.String)>
<android.view.inputmethod.BaseInputConnection: boolean setComposingRegion(int,int)>
<android.view.inputmethod.BaseInputConnection: boolean commitText(java.lang.CharSequence,int)>
<android.view.inputmethod.BaseInputConnection: boolean finishComposingText()>
<android.view.KeyCharacterMap: boolean getKeyData(int,android.view.KeyCharacterMap$KeyData)>
<android.view.KeyEvent: boolean getKeyData(android.view.KeyCharacterMap$KeyData)>
<android.text.method.DialerKeyListener: int lookup(android.view.KeyEvent,android.text.Spannable)>
<android.view.KeyCharacterMap: char getMatch(int,char[],int)>
<android.view.KeyEvent: char getMatch(char[],int)>
<android.text.method.NumberKeyListener: int lookup(android.view.KeyEvent,android.text.Spannable)>
<android.text.method.NumberKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>
<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>
<android.text.method.MetaKeyKeyListener: int getMetaState(java.lang.CharSequence,android.view.KeyEvent)>
<android.text.method.BaseMovementMethod: int getMovementMetaState(android.text.Spannable,android.view.KeyEvent)>
<android.text.method.BaseMovementMethod: boolean onKeyOther(android.widget.TextView,android.text.Spannable,android.view.KeyEvent)>
<android.text.method.BaseMovementMethod: boolean onKeyDown(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<android.text.method.QwertyKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.view.KeyEvent: char getNumber()>
<android.text.method.MetaKeyKeyListener: boolean onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.MetaKeyKeyListener: int getMetaState(java.lang.CharSequence,int,android.view.KeyEvent)>
<android.text.method.ArrowKeyMovementMethod: boolean handleMovementKey(android.widget.TextView,android.text.Spannable,int,int,android.view.KeyEvent)>
<android.text.method.BaseKeyListener: boolean forwardDelete(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.BaseKeyListener: boolean backspace(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.TextKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)>
<android.text.method.TextKeyListener: boolean onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)>
<android.text.method.TextKeyListener: boolean onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.view.KeyEvent: int getUnicodeChar(int)>
<android.view.KeyEvent: int getUnicodeChar()>
<android.view.KeyCharacterMap: void writeToParcel(android.os.Parcel,int)>
<android.view.InputDevice: void writeToParcel(android.os.Parcel,int)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)>
<android.widget.ListView: void onFinishInflate()>
<android.widget.ViewSwitcher: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)>
<android.view.View: void onInitializeAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)>
<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.View: void sendAccessibilityEventUncheckedInternal(android.view.accessibility.AccessibilityEvent)>
<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>
<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.app.Dialog: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.accessibility.AccessibilityEvent: void setEventTime(long)>
<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)>
<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)>
<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)>
<android.view.View: void announceForAccessibility(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)>
<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)>
<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)>
<android.view.accessibility.AccessibilityRecord: void setItemCount(int)>
<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)>
<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)>
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View,int)>
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)>
<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>
<android.widget.TextView: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setTransformationMethod(android.text.method.TransformationMethod)>
<android.view.ViewGroup: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>
<android.view.View: void setAccessibilityLiveRegion(int)>
<android.view.View: void setContentDescription(java.lang.CharSequence)>
<android.view.View: void setImportantForAccessibility(int)>
<android.view.View: void setLabelFor(int)>
<android.view.accessibility.AccessibilityRecord: void setToIndex(int)>
<android.view.accessibility.AccessibilityEvent: void appendRecord(android.view.accessibility.AccessibilityRecord)>
<android.view.accessibility.AccessibilityEvent: void setAction(int)>
<android.view.View: void clearAccessibilityFocus()>
<android.view.ViewGroup: void removeAllViewsInLayout()>
<android.view.ViewGroup: void removeDetachedView(android.view.View,boolean)>
<android.view.View: boolean requestAccessibilityFocus()>
<android.view.ViewRootImpl: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.accessibility.AccessibilityEvent: void setContentChangeTypes(int)>
<android.webkit.WebView: void onFocusChanged(boolean,int,android.graphics.Rect)>
<android.widget.ImageView: void setSelected(boolean)>
<android.view.ViewGroup: void dispatchSetSelected(boolean)>
<android.widget.TextView: void hideErrorIfUnchanged()>
<android.widget.ListView: void onMeasure(int,int)>
<android.widget.ActivityChooserView: void setExpandActivityOverflowButtonContentDescription(int)>
<android.view.View: void setSaveFromParentEnabled(boolean)>
<android.view.View: void setFitsSystemWindows(boolean)>
<android.view.View: void setDrawingCacheEnabled(boolean)>
<android.view.View: void makeOptionalFitsSystemWindows()>
<android.view.View: void setEnabled(boolean)>
<android.view.View: void setLongClickable(boolean)>
<android.view.View: void setWillNotDraw(boolean)>
<android.view.View: void setVisibility(int)>
<android.view.View: void setFocusable(int)>
<android.view.View: void setFocusableInTouchMode(boolean)>
<android.view.View: void setClickable(boolean)>
<android.view.accessibility.AccessibilityEvent: void setEventType(int)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>
<android.view.View: void sendAccessibilityEventInternal(int)>
<android.view.View: void sendAccessibilityEvent(int)>
<android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)>
<android.view.accessibility.AccessibilityRecord: void recycle()>
<android.view.accessibility.AccessibilityEvent: void recycle()>
<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.widget.TextSwitcher: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>
<android.widget.TabHost: void setup()>
<android.view.ContextThemeWrapper: void applyOverrideConfiguration(android.content.res.Configuration)>
<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)>
<android.view.VelocityTracker: boolean getEstimator(int,android.view.VelocityTracker$Estimator)>
<android.view.WindowManagerImpl: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.view.WindowManagerImpl: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.widget.HorizontalScrollView: void addView(android.view.View)>
<android.widget.HorizontalScrollView: void addView(android.view.View,int)>
<android.widget.HorizontalScrollView: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<android.widget.HorizontalScrollView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: boolean dispatchHoverEvent(android.view.MotionEvent)>
<android.view.ViewGroup: void removeView(android.view.View)>
<android.view.ViewGroup: void removeViewInLayout(android.view.View)>
<android.view.ViewGroup: void removeViewAt(int)>
<android.view.ViewGroup: void removeAllViews()>
<android.transition.Scene: void enter()>
<android.app.Dialog: void show()>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean,android.content.DialogInterface$OnCancelListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog show()>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)>
<android.webkit.JsDialogHelper: void showDialog(android.content.Context)>
<android.view.InputChannel: android.view.InputChannel[] openInputChannelPair(java.lang.String)>
<android.view.InputChannel: void readFromParcel(android.os.Parcel)>
<android.view.InputChannel: void transferTo(android.view.InputChannel)>
<android.view.InputChannel: void writeToParcel(android.os.Parcel,int)>
<android.view.KeyEvent: boolean metaStateHasModifiers(int,int)>
<android.text.method.BaseMovementMethod: boolean handleMovementKey(android.widget.TextView,android.text.Spannable,int,int,android.view.KeyEvent)>
<android.text.method.LinkMovementMethod: boolean handleMovementKey(android.widget.TextView,android.text.Spannable,int,int,android.view.KeyEvent)>
<android.view.KeyEvent: boolean hasModifiers(int)>
<android.widget.TextView: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.widget.TextView: boolean onKeyDown(int,android.view.KeyEvent)>
<android.widget.TextView: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.widget.ListView: boolean onKeyDown(int,android.view.KeyEvent)>
<android.widget.ListView: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.widget.ListView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.ListView: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.view.ViewStub: android.view.View inflate()>
<android.view.ViewStub: void setVisibility(int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog create()>
<android.view.animation.Animation: void setDuration(long)>
<android.view.animation.Animation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AlphaAnimation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.ScaleAnimation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.TranslateAnimation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AnimationSet: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.RotateAnimation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AnimationSet: void initialize(int,int,int,int)>
<android.view.animation.AnimationSet: void setDuration(long)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,int,java.util.Map,boolean)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.webkit.WebView: void <init>(android.content.Context)>
<android.webkit.WebView: void onVisibilityChanged(android.view.View,int)>
<android.webkit.WebView: void setOverScrollMode(int)>
<android.webkit.WebView: java.lang.String findAddress(java.lang.String)>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,int)>
<android.widget.TextView: void append(java.lang.CharSequence,int,int)>
<android.text.util.Linkify: boolean addLinks(android.widget.TextView,int)>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,int,java.util.function.Function)>
<android.widget.Spinner: void setAdapter(android.widget.SpinnerAdapter)>
<android.widget.Spinner: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.view.InputEventReceiver: void <init>(android.view.InputChannel,android.os.Looper)>
<android.view.InputEventReceiver: void finishInputEvent(android.view.InputEvent,boolean)>
<android.view.inputmethod.InputConnectionWrapper: void setTarget(android.view.inputmethod.InputConnection)>
<android.view.TextureView: void setSurfaceTexture(android.graphics.SurfaceTexture)>
<android.view.inputmethod.InputMethodManager: void hideSoftInputFromInputMethod(android.os.IBinder,int)>
<android.view.inputmethod.InputMethodManager: void setInputMethod(android.os.IBinder,java.lang.String)>
<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>
<android.view.inputmethod.InputMethodManager: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)>
<android.view.inputmethod.InputMethodManager: void showSoftInputFromInputMethod(android.os.IBinder,int)>
<android.view.inputmethod.InputMethodManager: boolean switchToNextInputMethod(android.os.IBinder,boolean)>
<android.view.inputmethod.InputMethodManager: boolean switchToLastInputMethod(android.os.IBinder)>
<android.view.inputmethod.InputMethodManager: void showStatusIcon(android.os.IBinder,java.lang.String,int)>
<android.view.inputmethod.InputMethodManager: void hideStatusIcon(android.os.IBinder)>
<android.view.InputEventSender: void <init>(android.view.InputChannel,android.os.Looper)>
<android.view.InputEventSender: boolean sendInputEvent(int,android.view.InputEvent)>
<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)>
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)>
<android.app.Dialog: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.view.ViewGroup: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.widget.TextView: boolean onKeyPreIme(int,android.view.KeyEvent)>
<android.widget.ListPopupWindow: void setHeight(int)>
<android.widget.TextView: void <init>(android.content.Context)>
<android.appwidget.AppWidgetHostView: android.view.View getErrorView()>
<android.content.SyncActivityTooManyDeletes: void onCreate(android.os.Bundle)>
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.EditTextPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.TextView: android.content.res.ColorStateList getTextColors(android.content.Context,android.content.res.TypedArray)>
<android.widget.TextView: int getTextColor(android.content.Context,android.content.res.TypedArray,int)>
<android.widget.TextView: android.content.UndoManager getUndoManager()>
<android.widget.TextView: void onEditorAction(int)>
<android.widget.TextView: void setFilters(android.text.InputFilter[])>
<android.widget.TextView: boolean extractText(android.view.inputmethod.ExtractedTextRequest,android.view.inputmethod.ExtractedText)>
<android.widget.TextView: void setPrivateImeOptions(java.lang.String)>
<android.widget.TextView: void setRawInputType(int)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.app.ProgressDialog: void setMessage(java.lang.CharSequence)>
<android.app.ProgressDialog: void onCreate(android.os.Bundle)>
<android.app.AlertDialog: void setTitle(java.lang.CharSequence)>
<android.app.AlertDialog: void setMessage(java.lang.CharSequence)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,android.os.Looper,java.lang.CharSequence,int)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.widget.AutoCompleteTextView: void setCompletionHint(java.lang.CharSequence)>
<android.net.http.SslCertificate: android.view.View inflateCertificateView(android.content.Context)>
<android.widget.TextView: void setText(int)>
<android.widget.EditText: android.text.Editable getText()>
<android.widget.EditText: java.lang.CharSequence getText()>
<android.widget.EditText: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)>
<android.widget.TextView: void setText(char[],int,int)>
<android.widget.TextView: void setTextColor(android.content.res.ColorStateList)>
<android.widget.TextView: void setTextAppearance(android.content.Context,int)>
<android.widget.TextView: void setTextAppearance(int)>
<android.widget.TextView: void setUndoManager(android.content.UndoManager,java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>
<android.view.View: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)>
<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfoInternal()>
<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()>
<android.view.View$AccessibilityDelegate: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(android.view.View)>
<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>
<android.view.ViewGroup: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void enforceNotSealed()>
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: void setCanOpenPopup(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setCollectionInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void setCollectionItemInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo)>
<android.widget.ListView: void onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setInputType(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setLiveRegion(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setMovementGranularities(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setTextSelection(int,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setViewIdResourceName(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>
<android.widget.AbsListView: void onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void setContentInvalid(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setEditable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setMultiLine(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setConnectionId(int)>
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo focusSearch(int,int,long,int)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo focusSearch(int)>
<android.view.accessibility.AccessibilityInteractionClient: java.util.List findAccessibilityNodeInfosByViewId(int,int,long,java.lang.String)>
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo findAccessibilityNodeInfoByAccessibilityId(int,int,long,boolean,int,android.os.Bundle)>
<android.view.accessibility.AccessibilityInteractionClient: java.util.List findAccessibilityNodeInfosByText(int,int,long,java.lang.String)>
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo findFocus(int,int,long,int)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>
<android.view.accessibility.AccessibilityNodeInfo: void enforceSealed()>
<android.view.DragEvent: void recycle()>
<android.view.ViewGroup: boolean dispatchDragEvent(android.view.DragEvent)>
<android.view.ViewGroup: void endViewTransition(android.view.View)>
<android.view.ViewGroup: void clearDisappearingChildren()>
<android.widget.ListPopupWindow: void setAdapter(android.widget.ListAdapter)>
<android.widget.ActivityChooserView: boolean isShowingPopup()>
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.InputFilter: void sendInputEvent(android.view.InputEvent,int)>
<android.view.ViewDebug: java.lang.Object invokeViewMethod(android.view.View,java.lang.reflect.Method,java.lang.Object[])>
<android.widget.Toast: void <init>(android.content.Context,android.os.Looper)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)>
<android.webkit.JsDialogHelper: boolean invokeCallback(android.webkit.WebChromeClient,android.webkit.WebView)>
<android.widget.Toast: void setText(java.lang.CharSequence)>
<android.widget.Toast: void show()>
<android.database.sqlite.SqliteWrapper: void checkSQLiteException(android.content.Context,android.database.sqlite.SQLiteException)>
<android.database.sqlite.SqliteWrapper: int delete(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String[])>
<android.database.sqlite.SqliteWrapper: int update(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.database.sqlite.SqliteWrapper: boolean requery(android.content.Context,android.database.Cursor)>
<android.database.sqlite.SqliteWrapper: android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.database.sqlite.SqliteWrapper: android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)>
<android.provider.ContactsContract$QuickContact: void showQuickContact(android.content.Context,android.graphics.Rect,android.net.Uri,int,java.lang.String[])>
<android.provider.ContactsContract$QuickContact: void showQuickContact(android.content.Context,android.view.View,android.net.Uri,java.lang.String[],java.lang.String)>
<android.widget.QuickContactBadge: void onClick(android.view.View)>
<android.provider.ContactsContract$QuickContact: void showQuickContact(android.content.Context,android.view.View,android.net.Uri,int,java.lang.String[])>
<android.provider.ContactsContract$QuickContact: void showQuickContact(android.content.Context,android.graphics.Rect,android.net.Uri,java.lang.String[],java.lang.String)>
<android.widget.RemoteViews: void <init>(android.os.Parcel)>
<android.widget.RemoteViews: void <init>(android.widget.RemoteViews,android.widget.RemoteViews)>
<android.widget.RemoteViews: void addView(int,android.widget.RemoteViews)>
<android.widget.RemoteViews: void removeAllViews(int)>
<android.widget.RemoteViews: void setBitmap(int,java.lang.String,android.graphics.Bitmap)>
<android.widget.RemoteViews: void setImageViewBitmap(int,android.graphics.Bitmap)>
<android.widget.RemoteViews: void setBoolean(int,java.lang.String,boolean)>
<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)>
<android.app.Notification$Builder: android.app.Notification build()>
<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,java.lang.CharSequence)>
<android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)>
<android.widget.RemoteViews: void setContentDescription(int,java.lang.CharSequence)>
<android.widget.RemoteViews: void setInt(int,java.lang.String,int)>
<android.widget.RemoteViews: void setTextColor(int,int)>
<android.widget.RemoteViews: void setViewVisibility(int,int)>
<android.widget.RemoteViews: void setLong(int,java.lang.String,long)>
<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)>
<android.widget.RemoteViews: void <init>(android.widget.RemoteViews)>
<android.widget.RemoteViews: void mergeRemoteViews(android.widget.RemoteViews)>
<android.widget.RemoteViews: void <init>(java.lang.String,int)>
<android.widget.RemoteViews: void <init>(java.lang.String,int,int)>
<android.widget.RemoteViews: void reapply(android.content.Context,android.view.View,android.widget.RemoteViews$OnClickHandler)>
<android.widget.ImageView: void setScaleType(android.widget.ImageView$ScaleType)>
<android.transition.Visibility: android.animation.Animator onDisappear(android.view.ViewGroup,android.transition.TransitionValues,int,android.transition.TransitionValues,int)>
<android.transition.Visibility: android.animation.Animator createAnimator(android.view.ViewGroup,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.widget.ImageView: void setAdjustViewBounds(boolean)>
<android.widget.ImageButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ImageButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AbsListView: void setFastScrollEnabled(boolean)>
<android.widget.AbsListView: void setFastScrollAlwaysVisible(boolean)>
<android.widget.RemoteViewsAdapter: void <init>(android.content.Context,android.content.Intent,android.widget.RemoteViewsAdapter$RemoteAdapterConnectionCallback,boolean)>
<android.widget.AdapterViewAnimator: void setRemoteViewsAdapter(android.content.Intent,boolean)>
<android.widget.AbsListView: void setRemoteViewsAdapter(android.content.Intent,boolean)>
<android.view.ScaleGestureDetector: void <init>(android.content.Context,android.view.ScaleGestureDetector$OnScaleGestureListener,android.os.Handler)>
<android.widget.TimePicker: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.view.MagnificationSpec: void initialize(float,float,float)>
<android.view.inputmethod.InputMethodManager: void restartInput(android.view.View)>
<android.view.inputmethod.InputMethodManager: void checkFocus()>
<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)>
<android.view.inputmethod.InputMethodManager: void windowDismissed(android.os.IBinder)>
<android.view.inputmethod.InputMethodManager: void viewClicked(android.view.View)>
<android.widget.TextView: void viewClicked(android.view.inputmethod.InputMethodManager)>
<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int,android.os.ResultReceiver)>
<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int)>
<android.view.inputmethod.InputMethodManager: boolean isActive(android.view.View)>
<android.widget.TextView: boolean isInputMethodTarget()>
<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int,android.os.ResultReceiver)>
<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int)>
<android.view.inputmethod.InputMethodManager: void updateExtractedText(android.view.View,int,android.view.inputmethod.ExtractedText)>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()>
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>
<android.view.inputmethod.InputMethodManager: java.util.List getInputMethodList()>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>
<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>
<android.view.inputmethod.InputMethodManager: void showInputMethodAndSubtypeEnabler(java.lang.String)>
<android.view.inputmethod.InputMethodManager: void showSoftInputUnchecked(int,android.os.ResultReceiver)>
<android.webkit.WebResourceResponse: void setData(java.io.InputStream)>
<android.view.GestureDetector: void <init>(android.content.Context,android.view.GestureDetector$OnGestureListener,android.os.Handler)>
<android.view.ScaleGestureDetector: void setQuickScaleEnabled(boolean)>
<android.view.GestureDetector: void <init>(android.content.Context,android.view.GestureDetector$OnGestureListener)>
<android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>
<android.widget.TabWidget: void addView(android.view.View)>
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ActivityChooserView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.app.MediaRouteButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.PointerIcon: android.view.PointerIcon getDefaultIcon(android.content.Context)>
<android.view.PointerIcon: android.view.PointerIcon load(android.content.res.Resources,int)>
<android.view.PointerIcon: android.view.PointerIcon load(android.content.Context)>
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow(int)>
<android.accessibilityservice.AccessibilityService: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()>
<android.app.UiAutomation: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabelFor()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabeledBy()>
<android.view.MotionEvent$PointerCoords: float getAxisValue(int)>
<android.view.MotionEvent$PointerCoords: void setAxisValue(int,float)>
<android.view.WindowManagerGlobal: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>
<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])>
<android.os.Binder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])>
<android.app.ActivityManager: void dumpPackageStateStatic(java.io.FileDescriptor,java.lang.String)>
<android.app.ActivityManager: void dumpPackageState(java.io.FileDescriptor,java.lang.String)>
<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>
<android.security.KeyStore: boolean importKey(java.lang.String,byte[],int,int)>
<android.telephony.Rlog: int w(java.lang.String,java.lang.Throwable)>
<android.telephony.Rlog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.telephony.Rlog: int v(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.telephony.Rlog: int i(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.telephony.Rlog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: boolean stopScoUsingVirtualVoiceCall()>
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: boolean startScoUsingVirtualVoiceCall()>
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothHeadset: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)>
<android.bluetooth.BluetoothHeadset: void phoneStateChanged(int,int,int,java.lang.String,int,java.lang.String)>
<android.bluetooth.BluetoothHeadset: boolean isAudioOn()>
<android.bluetooth.BluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothHeadset: int getAudioState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: boolean disconnectAudio()>
<android.bluetooth.BluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: boolean connectAudio()>
<android.bluetooth.BluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: void clccResponse(int,int,int,int,boolean,java.lang.String,int)>
<android.util.Slog: int w(java.lang.String,java.lang.Throwable)>
<android.app.ActivityOptions: void <init>(android.os.Bundle)>
<android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Slog: int v(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Slog: int i(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.os.SystemClock: boolean setCurrentTimeMillis(long)>
<android.app.LoadedApk: void <init>(android.app.ActivityThread,android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo,java.lang.ClassLoader,boolean,boolean,boolean)>
<android.service.dreams.Sandman: void startDreamByUserRequest(android.content.Context)>
<android.service.dreams.Sandman: void startDreamWhenDockedIfAppropriate(android.content.Context)>
<android.app.ActivityThread: android.app.ActivityThread$ActivityClientRecord performResumeActivity(android.os.IBinder,boolean,java.lang.String)>
<android.app.ActivityThread: void handleResumeActivity(android.os.IBinder,boolean,boolean,java.lang.String)>
<android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.bluetooth.BluetoothMap: boolean setPriority(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothMap: boolean isConnected(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothMap: int getState()>
<android.bluetooth.BluetoothMap: int getPriority(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothMap: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothMap: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothMap: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothMap: android.bluetooth.BluetoothDevice getClient()>
<android.bluetooth.BluetoothMap: boolean disconnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothA2dp: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)>
<android.bluetooth.BluetoothPan: boolean isTetheringOn()>
<android.bluetooth.BluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothPan: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothPan: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)>
<android.app.ApplicationErrorReport$CrashInfo: void <init>(java.lang.Throwable)>
<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: void addView(android.view.View,int)>
<android.view.ViewGroup: void addView(android.view.View)>
<android.view.ViewGroup: void addView(android.view.View,int,int)>
<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroupOverlay: void add(android.view.View)>
<android.app.AlertDialog: void onCreate(android.os.Bundle)>
<android.widget.ListView: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>
<android.view.ViewGroup: void drawableStateChanged()>
<android.widget.AbsListView: void drawableStateChanged()>
<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>
<android.view.View: void draw(android.graphics.Canvas)>
<android.view.View$DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)>
<android.transition.ChangeBounds: android.animation.Animator createAnimator(android.view.ViewGroup,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>
<android.widget.AbsListView: void draw(android.graphics.Canvas)>
<android.webkit.WebView: void dispatchDraw(android.graphics.Canvas)>
<android.widget.AbsListView: void dispatchDraw(android.graphics.Canvas)>
<android.widget.ListView: void dispatchDraw(android.graphics.Canvas)>
<android.view.ViewGroup: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>
<android.view.ViewGroup: boolean gatherTransparentRegion(android.graphics.Region)>
<android.view.ViewGroup: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)>
<android.view.ViewRootImpl: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>
<android.widget.AbsListView: void getFocusedRect(android.graphics.Rect)>
<android.view.ViewGroup: void addFocusables(java.util.ArrayList,int,int)>
<android.view.ViewGroup: void offsetRectIntoDescendantCoords(android.view.View,android.graphics.Rect)>
<android.view.ViewGroup: void detachViewFromParent(android.view.View)>
<android.view.ViewGroup: boolean requestFocus(int,android.graphics.Rect)>
<android.view.ViewGroup: void setDescendantFocusability(int)>
<android.widget.ListView: void setItemsCanFocus(boolean)>
<android.view.ViewGroup: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.view.AbsSavedState: void <init>(android.os.Parcelable)>
<android.preference.Preference$BaseSavedState: void <init>(android.os.Parcelable)>
<android.preference.MultiCheckPreference: android.os.Parcelable onSaveInstanceState()>
<android.preference.ListPreference: android.os.Parcelable onSaveInstanceState()>
<android.preference.EditTextPreference: android.os.Parcelable onSaveInstanceState()>
<android.preference.SeekBarPreference: android.os.Parcelable onSaveInstanceState()>
<android.preference.VolumePreference: android.os.Parcelable onSaveInstanceState()>
<android.preference.DialogPreference: android.os.Parcelable onSaveInstanceState()>
<android.preference.TwoStatePreference: android.os.Parcelable onSaveInstanceState()>
<android.preference.MultiSelectListPreference: android.os.Parcelable onSaveInstanceState()>
<android.view.View$BaseSavedState: void <init>(android.os.Parcelable)>
<android.widget.ExpandableListView: android.os.Parcelable onSaveInstanceState()>
<android.widget.HorizontalScrollView: android.os.Parcelable onSaveInstanceState()>
<android.widget.ProgressBar: android.os.Parcelable onSaveInstanceState()>
<android.widget.Spinner: android.os.Parcelable onSaveInstanceState()>
<android.widget.AbsSpinner: android.os.Parcelable onSaveInstanceState()>
<android.widget.TextView: android.os.Parcelable onSaveInstanceState()>
<android.widget.CompoundButton: android.os.Parcelable onSaveInstanceState()>
<android.widget.AbsListView: android.os.Parcelable onSaveInstanceState()>
<android.widget.AdapterViewAnimator: android.os.Parcelable onSaveInstanceState()>
<android.view.View: android.os.Parcelable onSaveInstanceState()>
<android.widget.ScrollView: android.os.Parcelable onSaveInstanceState()>
<android.widget.AbsListView: boolean setFrame(int,int,int,int)>
<android.widget.Editor$HandleView: void updatePosition(int,int,boolean,boolean)>
<android.widget.Editor$HandleView: void updateDrawable(boolean)>
<android.widget.SimpleCursorAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>
<android.widget.CursorTreeAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.CursorTreeAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.GridView: void onFocusChanged(boolean,int,android.graphics.Rect)>
<android.widget.AbsListView: void onTextChanged(java.lang.CharSequence,int,int,int)>
<android.widget.AbsListView: void setItemChecked(int,boolean)>
<android.webkit.FindActionModeCallback: void findAll()>
<android.webkit.FindActionModeCallback: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)>
<android.webkit.FindActionModeCallback: void setWebView(android.webkit.WebView)>
<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>
<android.renderscript.RenderScriptGL: void setSurfaceTexture(android.graphics.SurfaceTexture,int,int)>
<android.filterfw.core.GLEnvironment: int registerSurfaceTexture(android.graphics.SurfaceTexture,int,int)>
<android.view.Surface: void copyFrom(android.view.SurfaceControl)>
<android.view.Surface: void readFromParcel(android.os.Parcel)>
<android.view.Surface: void transferFrom(android.view.Surface)>
<android.view.Surface: void unlockCanvas(android.graphics.Canvas)>
<android.view.Surface: void writeToParcel(android.os.Parcel,int)>
<android.view.WindowManagerGlobal: void addView(android.view.View,android.view.ViewGroup$LayoutParams,android.view.Display,android.view.Window)>
<android.view.WindowManagerGlobal: void removeView(android.view.View,boolean)>
<android.view.WindowManagerImpl: void removeViewImmediate(android.view.View)>
<android.view.WindowManagerImpl: void removeView(android.view.View)>
<android.view.WindowManagerGlobal: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.view.DisplayAdjustments: void setCompatibilityInfo(android.content.res.CompatibilityInfo)>
<android.app.LoadedApk: void setCompatibilityInfo(android.content.res.CompatibilityInfo)>
<android.view.DisplayAdjustments: void <init>(android.view.DisplayAdjustments)>
<android.view.Display: void <init>(android.hardware.display.DisplayManagerGlobal,int,android.view.DisplayInfo,android.view.DisplayAdjustments)>
<android.hardware.display.DisplayManagerGlobal: android.view.Display getCompatibleDisplay(int,android.view.DisplayAdjustments)>
<android.view.Display: void <init>(android.hardware.display.DisplayManagerGlobal,int,android.view.DisplayInfo,android.content.res.Resources)>
<android.hardware.display.DisplayManagerGlobal: android.view.Display getCompatibleDisplay(int,android.content.res.Resources)>
<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()>
<android.view.textservice.TextInfo: void <init>(java.lang.CharSequence,int,int,int,int)>
<android.widget.SpellChecker: void onSelectionChanged()>
<android.view.ViewGroup: void <init>(android.content.Context)>
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ActivityChooserView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.app.MediaRouteButton: void <init>(android.content.Context)>
<android.view.View: void buildLayer()>
<android.view.View: void cancelPendingInputEvents()>
<android.app.MediaRouteButton: void setRouteTypes(int)>
<android.app.MediaRouteButton: void onAttachedToWindow()>
<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>
<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>
<android.view.View: void getLocationInWindow(int[])>
<android.view.View: void layout(int,int,int,int)>
<android.widget.FrameLayout: void onLayout(boolean,int,int,int,int)>
<android.widget.AbsoluteLayout: void onLayout(boolean,int,int,int,int)>
<android.transition.ChangeBounds: void captureStartValues(android.transition.TransitionValues)>
<android.transition.ChangeBounds: void captureEndValues(android.transition.TransitionValues)>
<android.view.View: void applyDrawableToTransparentRegion(android.graphics.drawable.Drawable,android.graphics.Region)>
<android.view.View: boolean gatherTransparentRegion(android.graphics.Region)>
<android.view.View: void getLocationOnScreen(int[])>
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int,boolean)>
<android.transition.Visibility: void captureStartValues(android.transition.TransitionValues)>
<android.transition.Fade: void captureStartValues(android.transition.TransitionValues)>
<android.transition.Visibility: void captureEndValues(android.transition.TransitionValues)>
<android.view.View: int[] getLocationOnScreen()>
<android.view.View: float getVerticalScrollFactor()>
<android.view.View: void measure(int,int)>
<android.widget.FrameLayout: void onMeasure(int,int)>
<android.view.ViewGroup: void measureChildWithMargins(android.view.View,int,int,int,int)>
<android.view.ViewGroup: void measureChild(android.view.View,int,int)>
<android.view.ViewGroup: void measureChildren(int,int)>
<android.widget.AbsoluteLayout: void onMeasure(int,int)>
<android.webkit.WebView: void onMeasure(int,int)>
<android.widget.ActivityChooserView: void onMeasure(int,int)>
<android.widget.AbsListView: void onRtlPropertiesChanged(int)>
<android.widget.AbsListView: void onSizeChanged(int,int,int,int)>
<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>
<android.view.View: void setScaleX(float)>
<android.view.View: void setScaleY(float)>
<android.view.View: void setLayerType(int,android.graphics.Paint)>
<android.webkit.WebView: void setLayerType(int,android.graphics.Paint)>
<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.appwidget.AppWidgetHostView: void prepareView(android.view.View)>
<android.view.View: void setOverScrollMode(int)>
<android.view.View: void <init>(android.content.Context)>
<android.app.NativeActivity: void onCreate(android.os.Bundle)>
<android.widget.ImageView: void <init>(android.content.Context)>
<android.view.View: void setTag(int,java.lang.Object)>
<android.view.View: void setTagInternal(int,java.lang.Object)>
<android.transition.Slide: android.animation.Animator onAppear(android.view.ViewGroup,android.view.View,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.transition.Slide: android.animation.Animator onDisappear(android.view.ViewGroup,android.view.View,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.transition.Scene: android.transition.Scene getSceneForLayout(android.view.ViewGroup,int,android.content.Context)>
<android.widget.Editor$HandleView: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.DisplayEventReceiver: void <init>(android.os.Looper,int)>
<android.view.ViewOverlay: void add(android.graphics.drawable.Drawable)>
<android.view.ViewOverlay: void remove(android.graphics.drawable.Drawable)>
<android.view.ViewGroupOverlay: void remove(android.view.View)>
<android.widget.NumberPicker: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.NumberPicker: void setMaxValue(int)>
<android.widget.NumberPicker: void setMinValue(int)>
<android.view.textservice.SpellCheckerSession: void close()>
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker()>
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(boolean)>
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()>
<android.view.textservice.TextServicesManager: boolean isSpellCheckerEnabled()>
<android.view.SoundEffectConstants: int getContantForFocusDirection(int)>
<android.widget.ScrollView: void addView(android.view.View)>
<android.widget.ScrollView: void addView(android.view.View,int)>
<android.widget.ScrollView: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<android.widget.ScrollView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)>
<android.widget.SlidingDrawer: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.SlidingDrawer: void onFinishInflate()>
<android.widget.SlidingDrawer: void onMeasure(int,int)>
<android.view.InputEvent: void recycle()>
<android.view.MotionEvent: void recycle()>
<android.widget.ScrollView: boolean onTouchEvent(android.view.MotionEvent)>
<android.inputmethodservice.SoftInputWindow: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.inputmethodservice.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)>
<android.gesture.GestureOverlayView: void cancelGesture()>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,android.view.MotionEvent$PointerProperties[],android.view.MotionEvent$PointerCoords[],int,int,float,float,int,int,int,int,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,android.view.MotionEvent$PointerProperties[],android.view.MotionEvent$PointerCoords[],int,int,float,float,int,int,int,int)>
<android.widget.ZoomButtonsController: boolean onTouch(android.view.View,android.view.MotionEvent)>
<android.view.KeyEvent: void recycle()>
<android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>
<android.text.method.CharacterPickerDialog: void <init>(android.content.Context,android.view.View,android.text.Editable,java.lang.String,boolean)>
<android.app.AlertDialog: void <init>(android.content.Context,int)>
<android.app.Dialog: void <init>(android.content.Context,int)>
<android.app.DialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<android.app.SearchDialog: void <init>(android.content.Context,android.app.SearchManager)>
<android.inputmethodservice.SoftInputWindow: void <init>(android.content.Context,java.lang.String,int,android.inputmethodservice.SoftInputWindow$Callback,android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,int,int,boolean)>
<android.widget.AbsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.view.View: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)>
<android.widget.ActivityChooserView: void <init>(android.content.Context)>
<android.webkit.FindActionModeCallback: void <init>(android.content.Context)>
<android.app.TimePickerDialog: void <init>(android.content.Context,int,android.app.TimePickerDialog$OnTimeSetListener,int,int,boolean)>
<android.preference.DialogPreference: android.view.View onCreateDialogView()>
<android.view.ContextThemeWrapper: java.lang.Object getSystemService(java.lang.String)>
<android.view.LayoutInflater: void setFactory(android.view.LayoutInflater$Factory)>
<android.view.LayoutInflater: void setFactory2(android.view.LayoutInflater$Factory2)>
<android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>
<android.view.MotionEvent: android.view.MotionEvent copy()>
<android.view.MotionEvent: android.view.InputEvent copy()>
<android.view.GestureDetector: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>
<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>
<android.view.MotionEvent: void transform(android.graphics.Matrix)>
<android.view.View: boolean toGlobalMotionEvent(android.view.MotionEvent)>
<android.view.View: boolean toLocalMotionEvent(android.view.MotionEvent)>
<android.widget.ExpandableListView: void setAdapter(android.widget.ListAdapter)>
<android.widget.ExpandableListView: boolean setSelectedChild(int,int,boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.p2p.WifiP2pDevice: void <init>(java.lang.String)>
<android.net.wifi.p2p.WifiP2pGroup: boolean removeClient(java.lang.String)>
<android.net.wifi.p2p.WifiP2pGroup: void <init>(java.lang.String)>
<android.net.wifi.p2p.WifiP2pGroup: void addClient(java.lang.String)>
<android.net.wifi.p2p.WifiP2pDevice: void updateSupplicantDetails(android.net.wifi.p2p.WifiP2pDevice)>
<android.net.RouteInfo: void <init>(android.net.IpPrefix,java.net.InetAddress,java.lang.String,int)>
<android.net.RouteInfo: void <init>(android.net.IpPrefix,java.net.InetAddress,java.lang.String)>
<android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress,java.net.InetAddress,java.lang.String)>
<android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress,java.lang.String)>
<android.net.RouteInfo: void <init>(android.net.IpPrefix,java.net.InetAddress)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addRoute(java.net.InetAddress,int)>
<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int,android.media.audiopolicy.AudioPolicy)>
<android.net.NetworkStatsHistory: void recordData(long,long,android.net.NetworkStats$Entry)>
<android.text.Layout: void drawText(android.graphics.Canvas,int,int)>
<android.text.Layout: void draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)>
<android.text.TextLine: float measure(int,boolean,android.graphics.Paint$FontMetricsInt)>
<android.text.TextLine: float metrics(android.graphics.Paint$FontMetricsInt)>
<android.text.BoringLayout: android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence,android.text.TextPaint,android.text.TextDirectionHeuristic,android.text.BoringLayout$Metrics)>
<android.widget.TextView: void onDraw(android.graphics.Canvas)>
<android.text.BoringLayout: void draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)>
<android.text.Layout: float getLineWidth(int)>
<android.widget.TextView: int computeHorizontalScrollRange()>
<android.text.Layout: float getLineMax(int)>
<android.text.Layout: float getLineRight(int)>
<android.text.Layout: float getLineLeft(int)>
<android.text.BoringLayout: android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence,android.text.TextPaint,android.text.BoringLayout$Metrics)>
<android.text.BoringLayout: android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence,android.text.TextPaint)>
<android.text.BoringLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int)>
<android.text.BoringLayout: android.text.BoringLayout make(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int)>
<android.text.BoringLayout: android.text.BoringLayout replaceOrMake(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean)>
<android.text.BoringLayout: android.text.BoringLayout replaceOrMake(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int)>
<android.text.BoringLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean)>
<android.text.BoringLayout: android.text.BoringLayout make(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean)>
<android.text.Layout: float getPrimaryHorizontal(int,boolean)>
<android.widget.TextView: boolean bringPointIntoView(int)>
<android.text.Layout: void getCursorPath(int,android.graphics.Path,java.lang.CharSequence)>
<android.text.Layout: float getPrimaryHorizontal(int)>
<android.text.Layout: float getSecondaryHorizontal(int,boolean)>
<android.text.Layout: float getSecondaryHorizontal(int)>
<android.text.Layout: void getSelectionPath(int,int,android.graphics.Path)>
<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops,int,int)>
<android.text.Layout: int getOffsetForHorizontal(int,float,boolean)>
<android.text.Layout: int getOffsetForHorizontal(int,float)>
<android.widget.TextView: int getOffsetForPosition(float,float)>
<android.text.Selection: boolean extendDown(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean moveUp(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean moveDown(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean extendUp(android.text.Spannable,android.text.Layout)>
<android.widget.TextView: boolean moveCursorToVisibleOffset()>
<android.text.method.ArrowKeyMovementMethod: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.widget.TextView: void onRtlPropertiesChanged(int)>
<android.widget.TextView: int getExtendedPaddingTop()>
<android.widget.TextView: int getExtendedPaddingBottom()>
<android.widget.TextView: float getRightFadingEdgeStrength()>
<android.text.method.Touch: void scrollTo(android.widget.TextView,android.text.Layout,int,int)>
<android.widget.TextView: float getLeftFadingEdgeStrength()>
<android.text.Layout: int getOffsetToRightOf(int)>
<android.text.Selection: boolean extendRight(android.text.Spannable,android.text.Layout)>
<android.text.method.ArrowKeyMovementMethod: boolean right(android.widget.TextView,android.text.Spannable)>
<android.text.Selection: boolean moveRight(android.text.Spannable,android.text.Layout)>
<android.text.Layout: int getOffsetToLeftOf(int)>
<android.text.Selection: boolean extendLeft(android.text.Spannable,android.text.Layout)>
<android.text.method.ArrowKeyMovementMethod: boolean left(android.widget.TextView,android.text.Spannable)>
<android.text.Selection: boolean moveLeft(android.text.Spannable,android.text.Layout)>
<android.renderscript.Script: void bindAllocation(android.renderscript.Allocation,int)>
<android.renderscript.Script: android.renderscript.Script$FieldID createFieldID(int,android.renderscript.Element)>
<android.renderscript.Script: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>
<android.renderscript.Script: void forEach(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.FieldPacker,android.renderscript.Script$LaunchOptions)>
<android.renderscript.Script: void forEach(int,android.renderscript.Allocation[],android.renderscript.Allocation,android.renderscript.FieldPacker,android.renderscript.Script$LaunchOptions)>
<android.renderscript.Script: void setTimeZone(java.lang.String)>
<android.text.format.DateFormat: char[] getDateFormatOrder(android.content.Context)>
<android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>
<android.opengl.EGL14: android.opengl.EGLSurface eglCreateWindowSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,java.lang.Object,int[],int)>
<android.media.MediaDrm$KeyRequest: byte[] getData()>
<android.media.MediaDrm$KeyRequest: java.lang.String getDefaultUrl()>
<android.provider.SearchRecentSuggestions: void <init>(android.content.Context,java.lang.String,int)>
<android.provider.SearchRecentSuggestions: void saveRecentQuery(java.lang.String,java.lang.String)>
<android.provider.SearchRecentSuggestions: void truncateHistory(android.content.ContentResolver,int)>
<android.os.Handler: void <init>(android.os.Handler$Callback,boolean)>
<android.os.Handler: void <init>(boolean)>
<android.os.Handler: void <init>(android.os.Handler$Callback)>
<android.os.Handler: void <init>()>
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor,boolean)>
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor)>
<android.service.dreams.DreamService: void <init>()>
<android.app.ListFragment: void <init>()>
<android.view.ViewRootImpl: void <init>(android.content.Context,android.view.Display)>
<android.content.Loader$ForceLoadContentObserver: void <init>(android.content.Loader)>
<android.content.CursorLoader: void <init>(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.CursorLoader: void <init>(android.content.Context)>
<android.app.Presentation: void <init>(android.content.Context,android.view.Display,int)>
<android.preference.PreferenceFragment: void <init>()>
<android.text.method.MultiTapKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.speech.RecognitionService: void <init>()>
<android.widget.ZoomButtonsController: void <init>(android.view.View)>
<android.content.ContentQueryMap: void setKeepUpdated(boolean)>
<android.app.Activity: void <init>()>
<android.widget.DateTimeView: void onAttachedToWindow()>
<android.text.method.PasswordTransformationMethod: void onTextChanged(java.lang.CharSequence,int,int,int)>
<android.app.ListActivity: void <init>()>
<android.os.CountDownTimer: void <init>(long,long)>
<android.view.WindowId$FocusObserver: void <init>()>
<android.media.SubtitleTrack: void <init>(android.media.MediaFormat)>
<android.media.WebVttRenderer: android.media.SubtitleTrack createTrack(android.media.MediaFormat)>
<android.widget.Filter: void <init>()>
<android.nfc.cardemulation.HostApduService: void <init>()>
<android.preference.PreferenceGroupAdapter: void <init>(android.preference.PreferenceGroup)>
<android.widget.DigitalClock: void onAttachedToWindow()>
<android.preference.PreferenceActivity: void <init>()>
<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context,android.content.ComponentName)>
<android.os.Handler: boolean runWithScissors(java.lang.Runnable,long)>
<android.view.WindowManagerGlobal: void setStoppedState(android.os.IBinder,boolean)>
<android.media.MediaActionSound: void <init>()>
<android.media.SoundPool: int load(android.content.res.AssetFileDescriptor,int)>
<android.os.UserManager: android.content.pm.UserInfo createUser(java.lang.String,int)>
<android.os.UserManager: android.os.Bundle getApplicationRestrictions(java.lang.String)>
<android.os.UserManager: android.os.Bundle getApplicationRestrictions(java.lang.String,android.os.UserHandle)>
<android.os.UserManager: int getUserHandle(int)>
<android.os.UserManager: android.graphics.Bitmap getUserIcon(int)>
<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>
<android.os.UserManager: java.lang.String getUserName()>
<android.os.UserManager: android.os.Bundle getUserRestrictions(android.os.UserHandle)>
<android.os.UserManager: android.os.Bundle getUserRestrictions()>
<android.accounts.ChooseTypeAndAccountActivity: void onCreate(android.os.Bundle)>
<android.os.UserManager: int getUserSerialNumber(int)>
<android.os.UserManager: java.util.List getUsers()>
<android.os.UserManager: java.util.List getUsers(boolean)>
<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>
<android.os.UserManager: boolean isUserRunning(int)>
<android.os.UserManager: boolean isUserRunningOrStopping(android.os.UserHandle)>
<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>
<android.app.ApplicationPackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>
<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>
<android.app.ApplicationPackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>
<android.os.UserManager: boolean removeUser(int)>
<android.os.UserManager: boolean removeUser(android.os.UserHandle)>
<android.os.UserManager: void setApplicationRestrictions(java.lang.String,android.os.Bundle,android.os.UserHandle)>
<android.os.UserManager: void setUserIcon(int,android.graphics.Bitmap)>
<android.os.UserManager: void setUserName(int,java.lang.String)>
<android.os.UserManager: void setUserRestriction(java.lang.String,boolean,android.os.UserHandle)>
<android.os.UserManager: void setUserRestrictions(android.os.Bundle)>
<android.os.UserManager: void setUserRestrictions(android.os.Bundle,android.os.UserHandle)>
<android.nfc.Tag: void <init>(byte[],int[],android.os.Bundle[],int,android.nfc.INfcTag)>
<android.nfc.Tag: android.nfc.Tag createMockTag(byte[],int[],android.os.Bundle[])>
<android.net.nsd.NsdManager: void <init>(android.content.Context,android.net.nsd.INsdManager)>
<android.net.nsd.NsdManager: void setEnabled(boolean)>
<android.security.SystemKeyStore: void deleteKey(java.lang.String)>
<android.print.PrinterCapabilitiesInfo$Builder: void <init>(android.print.PrinterId)>
<android.print.PrinterCapabilitiesInfo$Builder: android.print.PrinterCapabilitiesInfo build()>
<android.print.PrinterCapabilitiesInfo$Builder: android.print.PrinterCapabilitiesInfo$Builder setMinMargins(android.print.PrintAttributes$Margins)>
<android.security.KeyPairGeneratorSpec: void <init>(android.content.Context,java.lang.String,java.lang.String,int,java.security.spec.AlgorithmParameterSpec,javax.security.auth.x500.X500Principal,java.math.BigInteger,java.util.Date,java.util.Date,int)>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec build()>
<android.media.ThumbnailUtils: android.graphics.Bitmap createImageThumbnail(java.io.File,android.util.Size,android.os.CancellationSignal)>
<android.media.ThumbnailUtils: android.graphics.Bitmap createImageThumbnail(java.lang.String,int)>
<android.media.ExifInterface: java.lang.String getAttribute(java.lang.String)>
<android.media.ExifInterface: double getAttributeDouble(java.lang.String,double)>
<android.media.ExifInterface: int getAttributeInt(java.lang.String,int)>
<android.media.ExifInterface: long[] getThumbnailRange()>
<android.media.ExifInterface: void setAttribute(java.lang.String,java.lang.String)>
<android.print.PrintJobInfo: void setCopies(int)>
<android.print.PrintJobInfo: void setCreationTime(long)>
<android.media.JetPlayer: boolean loadJetFile(android.content.res.AssetFileDescriptor)>
<android.security.KeyChain: void choosePrivateKeyAlias(android.app.Activity,android.security.KeyChainAliasCallback,java.lang.String[],java.security.Principal[],android.net.Uri,java.lang.String)>
<android.security.KeyChain: void choosePrivateKeyAlias(android.app.Activity,android.security.KeyChainAliasCallback,java.lang.String[],java.security.Principal[],java.lang.String,int,java.lang.String)>
<android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)>
<android.net.Uri: java.lang.String encode(java.lang.String)>
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)>
<android.content.Intent: java.lang.String toUri(int)>
<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>
<android.app.SearchManager: android.database.Cursor getSuggestions(android.app.SearchableInfo,java.lang.String,int)>
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()>
<android.provider.MediaStore$Audio$Playlists$Members: boolean moveItem(android.content.ContentResolver,long,int,int)>
<android.provider.VoicemailContract$Status: android.net.Uri buildSourceUri(java.lang.String)>
<android.provider.VoicemailContract$Voicemails: android.net.Uri buildSourceUri(java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri buildSearchDocumentsUri(java.lang.String,java.lang.String,java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore$Video$Media: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore$Video$Thumbnails: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore$Audio$Albums: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore: android.net.Uri getMediaScannerUri()>
<android.provider.MediaStore$Audio$Playlists: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String)>
<android.provider.MediaStore$Audio$Artists: android.net.Uri getContentUri(java.lang.String)>
<android.provider.MediaStore$Images$Thumbnails: android.net.Uri getContentUri(java.lang.String)>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)>
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUriForAudioId(java.lang.String,int)>
<android.provider.MediaStore$Files: android.net.Uri getMtpReferencesUri(java.lang.String,long)>
<android.provider.MediaStore$Audio$Genres$Members: android.net.Uri getContentUri(java.lang.String,long)>
<android.provider.MediaStore$Audio$Artists$Albums: android.net.Uri getContentUri(java.lang.String,long)>
<android.provider.MediaStore$Audio$Playlists$Members: android.net.Uri getContentUri(java.lang.String,long)>
<android.provider.DocumentsContract: android.net.Uri buildChildDocumentsUri(java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri buildRecentDocumentsUri(java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri buildRootUri(java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri buildRootsUri(java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri buildDocumentUri(java.lang.String,java.lang.String)>
<android.net.MailTo: java.lang.String toString()>
<android.content.ClipData$Item: java.lang.CharSequence coerceToText(android.content.Context)>
<android.net.Uri$Builder: android.net.Uri$Builder appendEncodedPath(java.lang.String)>
<android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>
<android.content.ContentUris: android.net.Uri$Builder appendId(android.net.Uri$Builder,long)>
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>
<android.net.Uri: android.net.Uri fromFile(java.io.File)>
<android.content.Intent: void prepareToLeaveProcess(boolean)>
<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>
<android.app.Activity: boolean navigateUpTo(android.content.Intent)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.content.ClipData: void prepareToLeaveProcess(boolean,int)>
<android.content.ClipData: void prepareToLeaveProcess(boolean)>
<android.net.Uri: android.net.Uri getCanonicalUri()>
<android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>
<android.net.Uri: java.util.Set getQueryParameterNames()>
<android.net.Uri: java.util.List getQueryParameters(java.lang.String)>
<android.media.AudioFormat: void <init>()>
<android.media.JetPlayer: android.media.JetPlayer getJetPlayer()>
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int,int)>
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int)>
<android.text.format.DateUtils: java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int,java.lang.String)>
<android.text.format.DateUtils: java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int)>
<android.text.format.DateUtils: java.lang.String formatDateRange(android.content.Context,long,long,int)>
<android.text.format.DateUtils: java.lang.String formatDateTime(android.content.Context,long,int)>
<android.view.View: int[] onCreateDrawableState(int)>
<android.view.ViewGroup: int[] onCreateDrawableState(int)>
<android.app.MediaRouteButton: int[] onCreateDrawableState(int)>
<android.widget.TextView: int[] onCreateDrawableState(int)>
<android.view.View: int[] getDrawableState()>
<android.app.MediaRouteButton: void drawableStateChanged()>
<android.widget.TextView: void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.widget.TextView: void drawableStateChanged()>
<android.widget.TextView: void onResolveDrawables(int)>
<android.widget.TextView: void setTextColor(int)>
<android.widget.TextView: void setHintTextColor(android.content.res.ColorStateList)>
<android.widget.TextView: void setLinkTextColor(android.content.res.ColorStateList)>
<android.widget.ImageView: void drawableStateChanged()>
<android.view.View: boolean awakenScrollBars(int,boolean)>
<android.view.View: boolean awakenScrollBars(int)>
<android.view.View: boolean awakenScrollBars()>
<android.view.View: void drawableStateChanged()>
<android.view.View: void refreshDrawableState()>
<android.widget.ImageView: int[] onCreateDrawableState(int)>
<android.net.wifi.p2p.WifiP2pDeviceList: boolean isGroupOwner(java.lang.String)>
<android.preference.ListPreference: void onPrepareDialogBuilder(android.app.AlertDialog$Builder)>
<android.transition.Visibility: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.Fade: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.Slide: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.Fade: void <init>(int)>
<android.transition.AutoTransition: void <init>()>
<android.transition.AutoTransition: void <init>(android.content.Context,android.util.AttributeSet)>
<android.renderscript.ProgramVertexFixedFunction$Builder: android.renderscript.ProgramVertexFixedFunction create()>
<android.os.DropBoxManager: void addData(java.lang.String,byte[],int)>
<android.os.DropBoxManager: void addText(java.lang.String,java.lang.String)>
<android.os.DropBoxManager: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)>
<android.os.DropBoxManager: boolean isTagEnabled(java.lang.String)>
<android.media.RingtoneManager: void setType(int)>
<android.media.RingtoneManager: void <init>(android.content.Context,boolean)>
<android.media.RingtoneManager: void <init>(android.content.Context)>
<android.media.RingtoneManager: android.net.Uri getValidRingtoneUri(android.content.Context)>
<android.os.CancellationSignal: void throwIfCanceled()>
<android.media.ResampleInputStream: void <init>(java.io.InputStream,int,int)>
<android.text.DynamicLayout: void updateBlocks(int,int,int)>
<android.content.Intent: void removeCategory(java.lang.String)>
<android.app.ApplicationPackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)>
<android.content.Intent: void writeToParcel(android.os.Parcel,int)>
<android.content.ClipData: void writeToParcel(android.os.Parcel,int)>
<android.content.Intent: void toShortString(java.lang.StringBuilder,boolean,boolean,boolean,boolean)>
<android.content.Intent: java.lang.String toString()>
<android.text.style.URLSpan: void onClick(android.view.View)>
<android.content.ClipData$Item: void toShortString(java.lang.StringBuilder)>
<android.content.ClipData$Item: java.lang.String toString()>
<android.content.ClipData: void toShortString(java.lang.StringBuilder)>
<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageUserState: void <init>(android.content.pm.PackageUserState)>
<android.content.Intent: android.content.Intent cloneFilter()>
<android.content.Intent: void <init>(android.content.Intent)>
<android.content.Intent: int fillIn(android.content.Intent,int)>
<android.app.Notification: void cloneInto(android.app.Notification,boolean)>
<android.app.Notification: android.app.Notification clone()>
<android.app.Notification$Builder: android.app.Notification buildInto(android.app.Notification)>
<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest build()>
<android.media.audiofx.PresetReverb$Settings: void <init>(java.lang.String)>
<android.net.NetworkPolicyManager: void <init>(android.content.Context,android.net.INetworkPolicyManager)>
<android.net.NetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies()>
<android.net.NetworkPolicyManager: boolean getRestrictBackground()>
<android.net.NetworkPolicyManager: int getUidPolicy(int)>
<android.net.NetworkPolicyManager: int[] getUidsWithPolicy(int)>
<android.net.NetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])>
<android.net.NetworkPolicyManager: void setRestrictBackground(boolean)>
<android.net.NetworkPolicyManager: void setUidPolicy(int,int)>
<android.net.NetworkPolicyManager: void unregisterListener(android.net.INetworkPolicyListener)>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest: android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest newInstance(java.lang.String)>
<android.renderscript.AllocationAdapter: android.renderscript.AllocationAdapter create1D(android.renderscript.RenderScript,android.renderscript.Allocation)>
<android.renderscript.AllocationAdapter: android.renderscript.AllocationAdapter create2D(android.renderscript.RenderScript,android.renderscript.Allocation)>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)>
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation$MipmapControl,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createFromString(android.renderscript.RenderScript,java.lang.String,int)>
<android.renderscript.Allocation: android.view.Surface getSurface()>
<android.renderscript.Allocation: void setFromFieldPacker(int,int,int,int,android.renderscript.FieldPacker)>
<android.renderscript.Allocation: void setFromFieldPacker(int,android.renderscript.FieldPacker)>
<android.renderscript.ProgramFragmentFixedFunction$Builder: android.renderscript.ProgramFragmentFixedFunction create()>
<android.renderscript.Allocation: void setSurface(android.view.Surface)>
<android.renderscript.Allocation: void copyFrom(byte[])>
<android.security.KeyStoreParameter$Builder: void <init>(android.content.Context)>
<android.media.MediaActionSound: void load(int)>
<android.media.MediaActionSound: void play(int)>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceInfo: android.net.wifi.p2p.nsd.WifiP2pUpnpServiceInfo newInstance(java.lang.String,java.lang.String,java.util.List)>
<android.os.ParcelableParcel: void <init>(android.os.Parcel,java.lang.ClassLoader)>
<android.os.Bundle: void <init>(android.os.Parcel,int)>
<android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)>
<android.os.Bundle: void readFromParcel(android.os.Parcel)>
<android.util.NtpTrustedTime: long currentTimeMillis()>
<android.printservice.PrinterDiscoverySession: void removePrinters(java.util.List)>
<android.printservice.PrinterDiscoverySession: boolean isPrinterDiscoveryStarted()>
<android.printservice.PrinterDiscoverySession: boolean isDestroyed()>
<android.printservice.PrinterDiscoverySession: java.util.List getTrackedPrinters()>
<android.printservice.PrinterDiscoverySession: java.util.List getPrinters()>
<android.printservice.PrinterDiscoverySession: void addPrinters(java.util.List)>
<android.printservice.PrintDocument: android.print.PrintDocumentInfo getInfo()>
<android.printservice.PrintDocument: android.os.ParcelFileDescriptor getData()>
<android.printservice.PrintJob: boolean start()>
<android.printservice.PrintJob: boolean setTag(java.lang.String)>
<android.printservice.PrintJob: boolean isStarted()>
<android.printservice.PrintJob: boolean isQueued()>
<android.printservice.PrintJob: boolean isFailed()>
<android.printservice.PrintJob: boolean isCompleted()>
<android.printservice.PrintJob: boolean isCancelled()>
<android.printservice.PrintJob: boolean isBlocked()>
<android.printservice.PrintJob: boolean hasAdvancedOption(java.lang.String)>
<android.printservice.PrintJob: java.lang.String getTag()>
<android.printservice.PrintJob: android.print.PrintJobInfo getInfo()>
<android.printservice.PrintJob: android.print.PrintJobId getId()>
<android.printservice.PrintJob: android.printservice.PrintDocument getDocument()>
<android.printservice.PrintJob: java.lang.String getAdvancedStringOption(java.lang.String)>
<android.printservice.PrintJob: int getAdvancedIntOption(java.lang.String)>
<android.printservice.PrintJob: boolean fail(java.lang.String)>
<android.printservice.PrintJob: boolean complete()>
<android.printservice.PrintJob: boolean cancel()>
<android.printservice.PrintJob: boolean block(java.lang.String)>
<android.printservice.PrintService: java.util.List getActivePrintJobs()>
<android.print.PrinterCapabilitiesInfo$Builder: android.print.PrinterCapabilitiesInfo$Builder setColorModes(int,int)>
<android.print.PrintAttributes: void setColorMode(int)>
<android.print.PrintAttributes$Builder: android.print.PrintAttributes$Builder setColorMode(int)>
<android.print.PrinterCapabilitiesInfo: android.print.PrintAttributes getDefaults()>
<android.renderscript.Program: void bindConstants(android.renderscript.Allocation,int)>
<android.renderscript.Program: android.renderscript.Type getConstant(int)>
<android.renderscript.Program: java.lang.String getTextureName(int)>
<android.renderscript.Program: android.renderscript.Program$TextureType getTextureType(int)>
<android.media.effect.EffectContext: android.media.effect.EffectContext createWithCurrentGlContext()>
<android.provider.MediaStore: java.lang.String getVersion(android.content.Context,java.lang.String)>
<android.provider.MediaStore: java.lang.String getVersion(android.content.Context)>
<android.provider.DocumentsContract: android.net.Uri createDocument(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: android.graphics.Bitmap getDocumentThumbnail(android.content.ContentResolver,android.net.Uri,android.graphics.Point,android.os.CancellationSignal)>
<android.provider.DocumentsContract: boolean deleteDocument(android.content.ContentResolver,android.net.Uri)>
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)>
<android.app.ApplicationPackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)>
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekFastDrawable()>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getDrawable()>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getFastDrawable()>
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekDrawable()>
<android.net.wifi.WifiManager: void <init>(android.content.Context,android.net.wifi.IWifiManager,android.os.Looper)>
<android.location.LocationManager: void addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)>
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>
<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)>
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>
<android.location.LocationManager: java.util.List getAllProviders()>
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
<android.location.LocationManager: android.location.Location getLastLocation()>
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.LocationManager: java.util.List getProviders(boolean)>
<android.location.LocationManager: void removeAllGeofences(android.app.PendingIntent)>
<android.location.LocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent)>
<android.location.LocationManager: void removeGpsStatusListener(android.location.GpsStatus$Listener)>
<android.location.LocationManager: void removeNmeaListener(android.location.OnNmeaMessageListener)>
<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)>
<android.location.LocationManager: void removeTestProvider(java.lang.String)>
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)>
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.LocationManager: boolean sendNiResponse(int,int)>
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>
<android.hardware.SerialManager: java.lang.String[] getSerialPorts()>
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>
<android.accessibilityservice.AccessibilityService: boolean performGlobalAction(int)>
<android.app.ActivityManager: int checkComponentPermission(java.lang.String,int,int,boolean)>
<android.app.ActivityManager: int checkUidPermission(java.lang.String,int)>
<android.app.ActivityManager: boolean clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)>
<android.app.ActivityManager: int getCurrentUser()>
<android.widget.TextClock: boolean is24HourModeEnabled()>
<android.app.ActivityManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>
<android.app.ActivityManager: int getFrontActivityScreenCompatMode()>
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>
<android.app.ActivityManager: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)>
<android.app.ActivityManager: boolean getPackageAskScreenCompat(java.lang.String)>
<android.app.ActivityManager: int getPackageScreenCompatMode(java.lang.String)>
<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>
<android.app.ActivityManager: java.util.List getProcessesInErrorState()>
<android.app.ActivityManager: java.util.List getRunningAppProcesses()>
<android.app.ActivityManager: java.util.List getRunningExternalApplications()>
<android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>
<android.app.ActivityManager: boolean isUserAMonkey()>
<android.app.ActivityManager: boolean isUserRunning(int)>
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>
<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)>
<android.app.ActivityManager: void setFrontActivityScreenCompatMode(int)>
<android.app.ActivityManager: void setPackageAskScreenCompat(java.lang.String,boolean)>
<android.app.ActivityManager: void setPackageScreenCompatMode(java.lang.String,int)>
<android.app.ActivityManager: boolean switchUser(int)>
<android.app.AppOpsManager: int checkOp(int,int,java.lang.String)>
<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>
<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>
<android.app.AppOpsManager: void finishOp(int,int,java.lang.String)>
<android.app.AppOpsManager: java.util.List getOpsForPackage(int,java.lang.String,int[])>
<android.app.AppOpsManager: java.util.List getOpsForPackage(int,java.lang.String,java.lang.String[])>
<android.app.AppOpsManager: java.util.List getPackagesForOps(int[])>
<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String)>
<android.app.AppOpsManager: void resetAllModes()>
<android.app.AppOpsManager: void setMode(int,int,java.lang.String,int)>
<android.app.AppOpsManager: void setMode(java.lang.String,int,java.lang.String,int)>
<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String,boolean)>
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
<android.accounts.AccountManager: void clearPassword(android.accounts.Account)>
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String,android.os.UserHandle)>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)>
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()>
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)>
<android.accounts.AccountManager: android.accounts.Account[] getSharedAccounts(android.os.UserHandle)>
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: boolean removeSharedAccount(android.accounts.Account,android.os.UserHandle)>
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>
<android.accounts.AccountManager: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>
<android.media.AudioManager: int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes)>
<android.media.AudioManager: void abandonAudioFocusForCall()>
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>
<android.media.AudioManager: void avrcpSupportsAbsoluteVolume(java.lang.String,boolean)>
<android.media.AudioManager: void forceVolumeControlStream(int)>
<android.media.AudioManager: int getLastAudibleStreamVolume(int)>
<android.media.AudioManager: int getMode()>
<android.media.AudioManager: int getRingerMode()>
<android.media.AudioManager: android.media.IRingtonePlayer getRingtonePlayer()>
<android.media.AudioManager: int getStreamMaxVolume(int)>
<android.media.AudioManager: int getStreamVolume(int)>
<android.media.AudioManager: int getVibrateSetting(int)>
<android.media.AudioManager: boolean isAudioFocusExclusive()>
<android.media.AudioManager: boolean isBluetoothScoOn()>
<android.media.AudioManager: boolean isMasterMute()>
<android.media.AudioManager: boolean isSpeakerphoneOn()>
<android.media.AudioManager: boolean isStreamMute(int)>
<android.media.AudioManager: boolean isValidRingerMode(int)>
<android.media.AudioManager: void setRingerMode(int)>
<android.media.AudioManager: void loadSoundEffects()>
<android.media.AudioManager: void playSoundEffect(int)>
<android.media.AudioManager: void playSoundEffect(int,float)>
<android.media.AudioManager: void playSoundEffect(int,int)>
<android.media.AudioManager: void reloadAudioSettings()>
<android.media.AudioManager: void requestAudioFocusForCall(int,int)>
<android.media.AudioManager: void setBluetoothScoOn(boolean)>
<android.media.AudioManager: void setMasterMute(boolean,int)>
<android.media.AudioManager: void setMicrophoneMute(boolean)>
<android.media.AudioManager: void setMode(int)>
<android.media.AudioManager: void setSpeakerphoneOn(boolean)>
<android.media.AudioManager: void setStreamVolume(int,int,int)>
<android.media.AudioManager: void setVibrateSetting(int,int)>
<android.media.AudioManager: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String)>
<android.media.AudioManager: boolean shouldVibrate(int)>
<android.media.AudioManager: void startBluetoothSco()>
<android.media.AudioManager: void stopBluetoothSco()>
<android.media.AudioManager: void unloadSoundEffects()>
<android.app.WallpaperManager: void clearWallpaperOffsets(android.os.IBinder)>
<android.app.WallpaperManager: int getDesiredMinimumHeight()>
<android.app.WallpaperManager: int getDesiredMinimumWidth()>
<android.app.WallpaperManager: android.app.WallpaperInfo getWallpaperInfo(int)>
<android.app.WallpaperManager: boolean hasResourceWallpaper(int)>
<android.app.WallpaperManager: void sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>
<android.app.WallpaperManager: void setWallpaperOffsets(android.os.IBinder,float,float)>
<android.app.WallpaperManager: void suggestDesiredDimensions(int,int)>
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>
<android.app.AlarmManager: void setTime(long)>
<android.app.AlarmManager: void setTimeZone(java.lang.String)>
<android.hardware.ConsumerIrManager: android.hardware.ConsumerIrManager$CarrierFrequencyRange[] getCarrierFrequencies()>
<android.hardware.ConsumerIrManager: boolean hasIrEmitter()>
<android.hardware.ConsumerIrManager: void transmit(int,int[])>
<android.app.ActivityThread: android.content.IContentProvider acquireProvider(android.content.Context,java.lang.String,int,boolean)>
<android.app.ActivityThread: android.app.LoadedApk getPackageInfo(java.lang.String,android.content.res.CompatibilityInfo,int,int)>
<android.app.ActivityThread: void handleRequestAssistContextExtras(android.app.ActivityThread$RequestAssistContextExtras)>
<android.print.PrintManager: void addPrintJobStateChangeListener(android.print.PrintManager$PrintJobStateChangeListener)>
<android.print.PrintManager: android.print.PrintJob getPrintJob(android.print.PrintJobId)>
<android.print.PrintManager: java.util.List getPrintJobs()>
<android.print.PrintManager: android.print.PrintJob print(java.lang.String,android.print.PrintDocumentAdapter,android.print.PrintAttributes)>
<android.print.PrintManager: void removePrintJobStateChangeListener(android.print.PrintManager$PrintJobStateChangeListener)>
<android.appwidget.AppWidgetManager: boolean bindRemoteViewsService(android.content.Context,int,android.content.Intent,android.app.IServiceConnection,int)>
<android.appwidget.AppWidgetManager: int[] getAppWidgetIds(android.content.ComponentName)>
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)>
<android.appwidget.AppWidgetManager: android.os.Bundle getAppWidgetOptions(int)>
<android.appwidget.AppWidgetManager: boolean hasBindAppWidgetPermission(java.lang.String)>
<android.appwidget.AppWidgetManager: boolean hasBindAppWidgetPermission(java.lang.String,int)>
<android.appwidget.AppWidgetManager: void notifyAppWidgetViewDataChanged(int[],int)>
<android.appwidget.AppWidgetManager: void partiallyUpdateAppWidget(int[],android.widget.RemoteViews)>
<android.appwidget.AppWidgetManager: void setBindAppWidgetPermission(java.lang.String,int,boolean)>
<android.appwidget.AppWidgetManager: void updateAppWidget(android.content.ComponentName,android.widget.RemoteViews)>
<android.appwidget.AppWidgetManager: void updateAppWidget(int[],android.widget.RemoteViews)>
<android.appwidget.AppWidgetManager: void updateAppWidgetOptions(int,android.os.Bundle)>
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)>
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)>
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)>
<android.app.PendingIntent: android.app.PendingIntent getActivitiesAsUser(android.content.Context,int,android.content.Intent[],int,android.os.Bundle,android.os.UserHandle)>
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle,android.os.UserHandle)>
<android.app.Notification: void <init>(android.content.Context,int,java.lang.CharSequence,long,java.lang.CharSequence,java.lang.CharSequence,android.content.Intent)>
<android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>
<android.provider.CalendarContract$CalendarAlerts: void scheduleAlarm(android.content.Context,android.app.AlarmManager,long)>
<android.media.AudioManager: void unregisterMediaButtonEventReceiver(android.content.ComponentName)>
<android.media.AudioManager: void registerMediaButtonEventReceiver(android.content.ComponentName)>
<android.app.PendingIntent: java.lang.String getCreatorPackage()>
<android.app.PendingIntent: int getCreatorUid()>
<android.app.PendingIntent: android.os.UserHandle getCreatorUserHandle()>
<android.app.PendingIntent: android.content.Intent getIntent()>
<android.app.PendingIntent: java.lang.String getTargetPackage()>
<android.app.PendingIntent: boolean isActivity()>
<android.app.PendingIntent: boolean isTargetedToPackage()>
<android.os.PowerManager: void goToSleep(long,int,int)>
<android.os.PowerManager: boolean isWakeLockLevelSupported(int)>
<android.os.PowerManager: void nap(long)>
<android.os.PowerManager: void reboot(java.lang.String)>
<android.os.PowerManager: void userActivity(long,int,int)>
<android.os.PowerManager: void wakeUp(long,int,java.lang.String)>
<android.hardware.usb.UsbManager: android.hardware.usb.UsbAccessory[] getAccessoryList()>
<android.hardware.usb.UsbManager: java.util.HashMap getDeviceList()>
<android.hardware.usb.UsbManager: boolean hasPermission(android.hardware.usb.UsbAccessory)>
<android.hardware.usb.UsbManager: boolean hasPermission(android.hardware.usb.UsbDevice)>
<android.hardware.usb.UsbManager: boolean isFunctionEnabled(java.lang.String)>
<android.hardware.usb.UsbManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
<android.hardware.usb.UsbManager: void requestPermission(android.hardware.usb.UsbAccessory,android.app.PendingIntent)>
<android.hardware.usb.UsbManager: void requestPermission(android.hardware.usb.UsbDevice,android.app.PendingIntent)>
<android.hardware.usb.UsbManager: void setCurrentFunction(java.lang.String,boolean)>
<android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList(int,int)>
<android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList()>
<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStoragePublicDirs(java.lang.String)>
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>
<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAndroidDataDirs()>
<android.os.Environment: java.io.File[] buildExternalStorageAndroidDataDirs()>
<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppFilesDirs(java.lang.String)>
<android.os.Environment: java.io.File[] buildExternalStorageAppFilesDirs(java.lang.String)>
<android.os.Environment: boolean isExternalStorageRemovable()>
<android.os.Environment: java.lang.String getExternalStorageState()>
<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppMediaDirs(java.lang.String)>
<android.os.Environment: java.io.File[] buildExternalStorageAppMediaDirs(java.lang.String)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDestinationInExternalPublicDir(java.lang.String,java.lang.String)>
<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppCacheDirs(java.lang.String)>
<android.os.Environment: java.io.File[] buildExternalStorageAppCacheDirs(java.lang.String)>
<android.os.Environment: java.io.File getExternalStorageDirectory()>
<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppObbDirs(java.lang.String)>
<android.os.Environment: java.io.File[] buildExternalStorageAppObbDirs(java.lang.String)>
<android.os.Environment: boolean isExternalStorageEmulated()>
<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppDataDirs(java.lang.String)>
<android.os.Environment: java.io.File[] buildExternalStorageAppDataDirs(java.lang.String)>
<android.os.Environment: java.lang.String getExternalStorageState(java.io.File)>
<android.os.Environment: java.lang.String getStorageState(java.io.File)>
<android.os.Environment: boolean isExternalStorageRemovable(java.io.File)>
<android.os.Environment: boolean isExternalStorageEmulated(java.io.File)>
<android.app.ApplicationPackageManager: boolean addPermission(android.content.pm.PermissionInfo)>
<android.app.ApplicationPackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)>
<android.app.ApplicationPackageManager: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)>
<android.app.ApplicationPackageManager: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>
<android.app.ApplicationPackageManager: int checkPermission(java.lang.String,java.lang.String)>
<android.app.ApplicationPackageManager: int checkSignatures(int,int)>
<android.app.ApplicationPackageManager: int checkSignatures(java.lang.String,java.lang.String)>
<android.app.ApplicationPackageManager: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)>
<android.app.ApplicationPackageManager: void clearPackagePreferredActivities(java.lang.String)>
<android.app.ApplicationPackageManager: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>
<android.app.ApplicationPackageManager: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>
<android.app.ApplicationPackageManager: void extendVerificationTimeout(int,int,long)>
<android.app.ApplicationPackageManager: void freeStorage(java.lang.String,long,android.content.IntentSender)>
<android.app.ApplicationPackageManager: void freeStorageAndNotify(java.lang.String,long,android.content.pm.IPackageDataObserver)>
<android.app.ApplicationPackageManager: java.util.List getAllPermissionGroups(int)>
<android.app.ApplicationPackageManager: int getApplicationEnabledSetting(java.lang.String)>
<android.app.ApplicationPackageManager: int getComponentEnabledSetting(android.content.ComponentName)>
<android.app.ApplicationPackageManager: android.content.ComponentName getHomeActivities(java.util.List)>
<android.app.ApplicationPackageManager: java.lang.String getInstallerPackageName(java.lang.String)>
<android.app.ApplicationPackageManager: java.lang.String getNameForUid(int)>
<android.app.ApplicationPackageManager: java.lang.String[] getPackagesForUid(int)>
<android.app.ApplicationPackageManager: java.util.List getPackagesHoldingPermissions(java.lang.String[],int)>
<android.app.ApplicationPackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>
<android.app.ApplicationPackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>
<android.app.ApplicationPackageManager: java.lang.String[] getSystemSharedLibraryNames()>
<android.app.ApplicationPackageManager: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()>
<android.app.ApplicationPackageManager: boolean hasSystemFeature(java.lang.String,int)>
<android.app.ApplicationPackageManager: boolean hasSystemFeature(java.lang.String)>
<android.app.ApplicationPackageManager: boolean isSafeMode()>
<android.app.ApplicationPackageManager: java.util.List queryContentProviders(java.lang.String,int,int,java.lang.String)>
<android.app.ApplicationPackageManager: java.util.List queryInstrumentation(java.lang.String,int)>
<android.app.ApplicationPackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)>
<android.app.ApplicationPackageManager: java.util.List queryIntentContentProvidersAsUser(android.content.Intent,int,int)>
<android.app.ApplicationPackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)>
<android.app.ApplicationPackageManager: void removePermission(java.lang.String)>
<android.app.ApplicationPackageManager: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)>
<android.app.ApplicationPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)>
<android.app.ApplicationPackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)>
<android.app.ApplicationPackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)>
<android.app.ApplicationPackageManager: void verifyPendingInstall(int,int)>
<android.app.StatusBarManager: void collapsePanels()>
<android.app.StatusBarManager: void disable(int)>
<android.app.StatusBarManager: void expandNotificationsPanel()>
<android.app.StatusBarManager: void expandSettingsPanel(java.lang.String)>
<android.app.StatusBarManager: void removeIcon(java.lang.String)>
<android.app.StatusBarManager: void setIcon(java.lang.String,int,int,java.lang.String)>
<android.app.StatusBarManager: void setIconVisibility(java.lang.String,boolean)>
<android.hardware.usb.UsbAccessory: java.lang.String getSerial()>
<android.app.NotificationManager: void cancelAll()>
<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)>
<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>
<android.hardware.input.InputManager: void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>
<android.hardware.input.InputManager: boolean[] deviceHasKeys(int,int[])>
<android.view.InputDevice: boolean[] hasKeys(int[])>
<android.hardware.input.InputManager: boolean[] deviceHasKeys(int[])>
<android.view.KeyCharacterMap: boolean[] deviceHasKeys(int[])>
<android.view.KeyCharacterMap: boolean deviceHasKey(int)>
<android.hardware.input.InputManager: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)>
<android.hardware.input.InputManager: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)>
<android.hardware.input.InputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()>
<android.hardware.input.InputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>
<android.hardware.input.InputManager: boolean injectInputEvent(android.view.InputEvent,int)>
<android.app.Instrumentation: void sendTrackballEventSync(android.view.MotionEvent)>
<android.app.Instrumentation: void sendKeySync(android.view.KeyEvent)>
<android.hardware.input.InputManager: void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>
<android.hardware.input.InputManager: void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>
<android.hardware.input.InputManager: void tryPointerSpeed(int)>
<android.net.wifi.p2p.WifiP2pManager: android.os.Messenger getMessenger(android.os.Binder)>
<android.net.wifi.p2p.WifiP2pManager: void setMiracastMode(int)>
<android.net.wifi.p2p.WifiP2pManager: void setWFDInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pWfdInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.app.UiModeManager: void disableCarMode(int)>
<android.app.UiModeManager: void enableCarMode(int)>
<android.app.UiModeManager: int getCurrentModeType()>
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean,android.graphics.Rect)>
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean)>
<android.app.Dialog: boolean onSearchRequested()>
<android.app.UiModeManager: int getNightMode()>
<android.app.UiModeManager: void setNightMode(int)>
<android.net.TrafficStats: long getMobileTcpRxPackets()>
<android.net.TrafficStats: long getMobileTcpTxPackets()>
<android.net.TrafficStats: long getRxBytes(java.lang.String)>
<android.net.TrafficStats: long getMobileRxBytes()>
<android.net.TrafficStats: long getRxPackets(java.lang.String)>
<android.net.TrafficStats: long getMobileRxPackets()>
<android.net.TrafficStats: long getTotalRxBytes()>
<android.net.TrafficStats: long getTotalRxPackets()>
<android.net.TrafficStats: long getTotalTxBytes()>
<android.net.TrafficStats: long getTotalTxPackets()>
<android.net.TrafficStats: long getTxBytes(java.lang.String)>
<android.net.TrafficStats: long getMobileTxBytes()>
<android.net.TrafficStats: long getTxPackets(java.lang.String)>
<android.net.TrafficStats: long getMobileTxPackets()>
<android.net.TrafficStats: long getUidRxBytes(int)>
<android.net.TrafficStats: long getUidRxPackets(int)>
<android.net.TrafficStats: long getUidTxBytes(int)>
<android.net.TrafficStats: long getUidTxPackets(int)>
<android.net.TrafficStats: void incrementOperationCount(int,int)>
<android.net.TrafficStats: void incrementOperationCount(int)>
<android.net.wifi.WifiManager: boolean disableNetwork(int)>
<android.net.wifi.WifiManager: boolean disconnect()>
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()>
<android.net.wifi.WifiManager: java.util.List getScanResults()>
<android.net.wifi.WifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()>
<android.net.wifi.WifiManager: int getWifiApState()>
<android.net.wifi.WifiManager: int getWifiState()>
<android.net.wifi.WifiManager: boolean initializeMulticastFiltering()>
<android.net.wifi.WifiManager: boolean isDualBandSupported()>
<android.net.wifi.WifiManager: boolean isMulticastEnabled()>
<android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()>
<android.net.wifi.WifiManager: boolean reassociate()>
<android.net.wifi.WifiManager: boolean reconnect()>
<android.net.wifi.WifiManager: boolean removeNetwork(int)>
<android.net.wifi.WifiManager: void setCountryCode(java.lang.String)>
<android.net.wifi.WifiManager: void setTdlsEnabled(java.net.InetAddress,boolean)>
<android.net.wifi.WifiManager: void setTdlsEnabledWithMacAddress(java.lang.String,boolean)>
<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)>
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>
<android.net.wifi.WifiManager: boolean startScan(android.os.WorkSource)>
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>
<android.content.ContentResolver: java.lang.Object addStatusChangeListener(int,android.content.SyncStatusObserver)>
<android.content.ContentResolver: void cancelSync(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: void cancelSync(android.net.Uri)>
<android.content.ContentResolver: void cancelSync(android.content.SyncRequest)>
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>
<android.content.ContentResolver: java.util.List getCurrentSyncs()>
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: boolean getMasterSyncAutomatically()>
<android.content.ContentResolver: java.util.List getOutgoingPersistedUriPermissions()>
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: java.util.List getPersistedUriPermissions()>
<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()>
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,int,int)>
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean,int)>
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>
<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: void removeStatusChangeListener(java.lang.Object)>
<android.content.ContentResolver: void requestSync(android.content.SyncRequest)>
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
<android.app.SearchManager: android.content.Intent getAssistIntent(boolean)>
<android.app.SearchManager: java.util.List getGlobalSearchActivities()>
<android.app.SearchManager: android.content.ComponentName getGlobalSearchActivity()>
<android.app.SearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>
<android.app.Dialog: boolean onSearchRequested(android.view.SearchEvent)>
<android.app.SearchDialog: boolean show(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle)>
<android.app.SearchManager: java.util.List getSearchablesInGlobalSearch()>
<android.app.SearchManager: android.content.ComponentName getWebSearchActivity()>
<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: int getCurrentFailedPasswordAttempts(int)>
<android.app.admin.DevicePolicyManager: android.content.ComponentName getGlobalProxyAdmin()>
<android.app.admin.DevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: long getPasswordExpiration(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback)>
<android.app.admin.DevicePolicyManager: boolean getStorageEncryption(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus(int)>
<android.app.admin.DevicePolicyManager: boolean hasCaCertInstalled(android.content.ComponentName,byte[])>
<android.app.admin.DevicePolicyManager: boolean hasGrantedPolicy(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: boolean installCaCert(android.content.ComponentName,byte[])>
<android.app.admin.DevicePolicyManager: boolean isActivePasswordSufficient()>
<android.app.admin.DevicePolicyManager: void lockNow(int)>
<android.app.admin.DevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String,int)>
<android.app.admin.DevicePolicyManager: void removeActiveAdmin(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void reportFailedPasswordAttempt(int)>
<android.app.admin.DevicePolicyManager: void reportSuccessfulPasswordAttempt(int)>
<android.app.admin.DevicePolicyManager: boolean resetPassword(java.lang.String,int)>
<android.app.admin.DevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)>
<android.app.admin.DevicePolicyManager: void setActivePasswordState(android.app.admin.PasswordMetrics,int)>
<android.app.admin.DevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.net.Proxy,java.util.List)>
<android.app.admin.DevicePolicyManager: void setKeyguardDisabledFeatures(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long)>
<android.app.admin.DevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long)>
<android.app.admin.DevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void uninstallCaCert(android.content.ComponentName,byte[])>
<android.hardware.display.DisplayManagerGlobal: void connectWifiDisplay(java.lang.String)>
<android.hardware.display.DisplayManagerGlobal: android.hardware.display.VirtualDisplay createVirtualDisplay(android.content.Context,android.media.projection.MediaProjection,java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay$Callback,android.os.Handler,java.lang.String)>
<android.hardware.display.DisplayManagerGlobal: void disconnectWifiDisplay()>
<android.hardware.display.DisplayManagerGlobal: void forgetWifiDisplay(java.lang.String)>
<android.hardware.display.DisplayManagerGlobal: int[] getDisplayIds()>
<android.hardware.display.DisplayManagerGlobal: android.view.DisplayInfo getDisplayInfo(int)>
<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>
<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)>
<android.app.UiAutomation: android.graphics.Bitmap takeScreenshot()>
<android.hardware.display.DisplayManagerGlobal: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()>
<android.hardware.display.DisplayManagerGlobal: void pauseWifiDisplay()>
<android.hardware.display.DisplayManagerGlobal: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>
<android.hardware.display.DisplayManagerGlobal: void renameWifiDisplay(java.lang.String,java.lang.String)>
<android.hardware.display.DisplayManagerGlobal: void resumeWifiDisplay()>
<android.content.ClipboardManager: android.content.ClipData getPrimaryClip()>
<android.content.ClipboardManager: android.content.ClipDescription getPrimaryClipDescription()>
<android.content.ClipboardManager: boolean hasPrimaryClip()>
<android.content.ClipboardManager: boolean hasText()>
<android.net.ConnectivityManager: int checkMobileProvisioning(int)>
<android.net.ConnectivityManager: android.net.LinkProperties getActiveLinkProperties()>
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int,boolean)>
<android.net.ConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
<android.net.ConnectivityManager: android.net.ProxyInfo getGlobalProxy()>
<android.net.ConnectivityManager: int getLastTetherError(java.lang.String)>
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(int)>
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(android.net.Network)>
<android.net.ConnectivityManager: boolean getMobileDataEnabled()>
<android.net.ConnectivityManager: java.lang.String getMobileProvisioningUrl()>
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>
<android.net.ConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()>
<android.net.ConnectivityManager: java.lang.String[] getTetherableIfaces()>
<android.net.ConnectivityManager: java.lang.String[] getTetherableUsbRegexs()>
<android.net.ConnectivityManager: java.lang.String[] getTetherableWifiRegexs()>
<android.net.ConnectivityManager: java.lang.String[] getTetheredIfaces()>
<android.net.ConnectivityManager: java.lang.String[] getTetheringErroredIfaces()>
<android.net.ConnectivityManager: boolean isActiveNetworkMetered()>
<android.net.ConnectivityManager: boolean isNetworkSupported(int)>
<android.net.ConnectivityManager: boolean isTetheringSupported()>
<android.net.ConnectivityManager: void reportInetCondition(int,int)>
<android.net.ConnectivityManager: boolean requestRouteToHostAddress(int,java.net.InetAddress)>
<android.net.ConnectivityManager: void setAirplaneMode(boolean)>
<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyInfo)>
<android.net.ConnectivityManager: void setProvisioningNotificationVisible(boolean,int,java.lang.String)>
<android.net.ConnectivityManager: int setUsbTethering(boolean)>
<android.net.ConnectivityManager: int tether(java.lang.String)>
<android.net.ConnectivityManager: int untether(java.lang.String)>
<android.net.ConnectivityManager: boolean updateLockdownVpn()>
<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)>
<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)>
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)>
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>
<android.media.AudioRecord: void release()>
<android.database.DefaultDatabaseErrorHandler: void onCorruption(android.database.sqlite.SQLiteDatabase)>
<android.view.Display: boolean hasAccess(int,int,int,int)>
<android.view.Display: boolean hasAccess(int)>
<android.view.DisplayInfo: boolean hasAccess(int)>
<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence,int,int)>
<android.text.LoginFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>
<android.app.Notification: java.lang.CharSequence safeCharSequence(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setSummaryText(java.lang.CharSequence)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setContentInfo(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)>
<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle setSummaryText(java.lang.CharSequence)>
<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle addLine(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setSummaryText(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setBigContentTitle(java.lang.CharSequence)>
<android.view.inputmethod.BaseInputConnection: boolean setComposingText(java.lang.CharSequence,int)>
<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Calendar)>
<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Date)>
<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,long)>
<android.text.TextUtils: java.lang.CharSequence expandTemplate(java.lang.CharSequence,java.lang.CharSequence[])>
<android.text.TextUtils: java.lang.CharSequence replace(java.lang.CharSequence,java.lang.String[],java.lang.CharSequence[])>
<android.text.Editable$Factory: android.text.Editable newEditable(java.lang.CharSequence)>
<android.view.inputmethod.BaseInputConnection: android.text.Editable getEditable()>
<android.view.inputmethod.BaseInputConnection: boolean clearMetaKeyStates(int)>
<android.view.inputmethod.BaseInputConnection: boolean deleteSurroundingText(int,int)>
<android.view.inputmethod.BaseInputConnection: int getCursorCapsMode(int)>
<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getSelectedText(int)>
<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getTextAfterCursor(int,int)>
<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)>
<android.view.inputmethod.BaseInputConnection: boolean setSelection(int,int)>
<android.text.SpannableStringBuilder: void <init>()>
<android.text.method.AllCapsTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>
<android.text.InputFilter$AllCaps: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
<android.text.Html: android.text.Spanned fromHtml(java.lang.String,int,android.text.Html$ImageGetter,android.text.Html$TagHandler)>
<android.text.TextUtils: java.lang.CharSequence concat(java.lang.CharSequence[])>
<android.app.Activity: void setDefaultKeyMode(int)>
<android.widget.TextView: boolean onDragEvent(android.view.DragEvent)>
<android.text.BidiFormatter: java.lang.CharSequence unicodeWrap(java.lang.CharSequence,android.text.TextDirectionHeuristic,boolean)>
<android.text.BidiFormatter: java.lang.String unicodeWrap(java.lang.String,android.text.TextDirectionHeuristic,boolean)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder valueOf(java.lang.CharSequence)>
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String,int)>
<android.text.SpannableStringBuilder: java.lang.CharSequence subSequence(int,int)>
<android.text.method.DigitsKeyListener: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
<android.text.method.NumberKeyListener: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
<android.text.SpannableStringBuilder: char charAt(int)>
<android.text.Html: android.text.Spanned fromHtml(java.lang.String)>
<android.text.Html: android.text.Spanned fromHtml(java.lang.String,android.text.Html$ImageGetter,android.text.Html$TagHandler)>
<android.text.Html: android.text.Spanned fromHtml(java.lang.String,int)>
<android.os.BatteryStats: void dumpLocked(android.content.Context,java.io.PrintWriter,int,int,long)>
<android.os.BatteryStats: void dumpLocked(android.content.Context,java.io.PrintWriter,java.lang.String,int,int,boolean)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.Editable replace(int,int,java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.Editable replace(int,int,java.lang.CharSequence,int,int)>
<android.text.SpannableStringBuilder: void clear()>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence,int,int)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,int,int)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(char)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,java.lang.Object,int)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder delete(int,int)>
<android.text.SpannableStringBuilder: android.text.Editable delete(int,int)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.Editable insert(int,java.lang.CharSequence)>
<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>
<android.text.SpannableStringBuilder: int getTextWidths(int,int,float[],android.graphics.Paint)>
<android.text.SpannableStringBuilder: void drawText(android.graphics.BaseCanvas,int,int,float,float,android.graphics.Paint)>
<android.text.SpannableStringBuilder: void drawTextRun(android.graphics.BaseCanvas,int,int,int,int,float,float,boolean,android.graphics.Paint)>
<android.text.SpannableStringBuilder: void getChars(int,int,char[],int)>
<android.text.SpannableStringBuilder: java.lang.String toString()>
<android.text.SpannableStringBuilder: boolean equals(java.lang.Object)>
<android.text.SpannableStringBuilder: int hashCode()>
<android.text.SpannableStringBuilder: int getTextRunCursor(int,int,boolean,int,int,android.graphics.Paint)>
<android.text.SpannableStringBuilder: void setFilters(android.text.InputFilter[])>
<android.preference.VolumePreference: void onBindDialogView(android.view.View)>
<android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest,android.media.audiopolicy.AudioPolicy)>
<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int)>
<android.provider.MediaStore$Images$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)>
<android.provider.MediaStore$Images$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory$Options)>
<android.provider.MediaStore$Video$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)>
<android.provider.MediaStore$Video$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory$Options)>
<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Builder addConnection(android.renderscript.Type,android.renderscript.Script$KernelID,android.renderscript.Script$FieldID)>
<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Builder addConnection(android.renderscript.Type,android.renderscript.Script$KernelID,android.renderscript.Script$KernelID)>
<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Builder addKernel(android.renderscript.Script$KernelID)>
<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup create()>
<android.nfc.NfcAdapter: void disableForegroundNdefPush(android.app.Activity)>
<android.nfc.NfcAdapter: void dispatch(android.nfc.Tag)>
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])>
<android.nfc.NfcAdapter: void enableForegroundNdefPush(android.app.Activity,android.nfc.NdefMessage)>
<android.nfc.NfcAdapter: boolean enableNdefPush()>
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)>
<android.nfc.NfcAdapter: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface()>
<android.nfc.NfcAdapter: void setBeamPushUris(android.net.Uri[],android.app.Activity)>
<android.nfc.NfcAdapter: void setBeamPushUrisCallback(android.nfc.NfcAdapter$CreateBeamUrisCallback,android.app.Activity)>
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,int)>
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity[])>
<android.nfc.NfcAdapter: void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback,android.app.Activity,int)>
<android.nfc.NfcAdapter: void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback,android.app.Activity,android.app.Activity[])>
<android.nfc.NfcAdapter: void setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback,android.app.Activity,android.app.Activity[])>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long,int)>
<android.media.ImageReader: void <init>(int,int,int,int,long)>
<android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int,long)>
<android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>
<android.media.ImageReader: android.media.Image acquireNextImage()>
<android.print.PrinterDiscoverySession: boolean isDestroyed()>
<android.print.PrinterDiscoverySession: void stopPrinterDiscovery()>
<android.print.PrinterDiscoverySession: void setOnPrintersChangeListener(android.print.PrinterDiscoverySession$OnPrintersChangeListener)>
<android.print.PrinterDiscoverySession: boolean isPrinterDiscoveryStarted()>
<android.provider.DocumentsProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>
<android.provider.DocumentsProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>
<android.provider.DocumentsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.provider.DocumentsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.provider.DocumentsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.provider.DocumentsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.text.PackedIntVector: void adjustValuesBelow(int,int,int)>
<android.text.PackedIntVector: void deleteAt(int,int)>
<android.text.PackedIntVector: int getValue(int,int)>
<android.text.DynamicLayout: int getLineDescent(int)>
<android.text.DynamicLayout: boolean getLineContainsTab(int)>
<android.text.DynamicLayout: int getParagraphDirection(int)>
<android.text.DynamicLayout: int getEllipsisCount(int)>
<android.text.DynamicLayout: int getEllipsisStart(int)>
<android.text.DynamicLayout: int getLineStart(int)>
<android.text.DynamicLayout: int getLineTop(int)>
<android.text.PackedIntVector: void insertAt(int,int[])>
<android.text.PackedIntVector: void setValue(int,int,int)>
<android.renderscript.FileA3D: android.renderscript.FileA3D createFromAsset(android.renderscript.RenderScript,android.content.res.AssetManager,java.lang.String)>
<android.renderscript.FileA3D: android.renderscript.FileA3D createFromFile(android.renderscript.RenderScript,java.lang.String)>
<android.renderscript.FileA3D: android.renderscript.FileA3D createFromFile(android.renderscript.RenderScript,java.io.File)>
<android.renderscript.FileA3D: android.renderscript.FileA3D createFromResource(android.renderscript.RenderScript,android.content.res.Resources,int)>
<android.media.MediaPlayer: void invoke(android.os.Parcel,android.os.Parcel)>
<android.media.Ringtone: void setUri(android.net.Uri,android.media.VolumeShaper$Configuration)>
<android.media.Ringtone: void setStreamType(int)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder,android.media.AudioAttributes,int)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)>
<android.media.MediaPlayer: void setOnSubtitleDataListener(android.media.MediaPlayer$OnSubtitleDataListener)>
<android.media.MediaPlayer: void setOnSubtitleDataListener(android.media.MediaPlayer$OnSubtitleDataListener,android.os.Handler)>
<android.media.MediaPlayer: void setVideoScalingMode(int)>
<android.nfc.NdefRecord: void <init>(short,byte[],byte[],byte[])>
<android.nfc.NdefMessage: void <init>(byte[])>
<android.nfc.NdefRecord: void <init>(byte[])>
<android.nfc.NdefRecord: android.nfc.NdefRecord createApplicationRecord(java.lang.String)>
<android.nfc.NdefRecord: android.nfc.NdefRecord createExternal(java.lang.String,java.lang.String,byte[])>
<android.nfc.NdefRecord: android.nfc.NdefRecord createMime(java.lang.String,byte[])>
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(android.net.Uri)>
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(java.lang.String)>
<android.nfc.NfcManager: void <init>(android.content.Context)>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: void <init>(int,int,android.net.wifi.p2p.WifiP2pDevice,byte[])>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: java.util.List newInstance(java.lang.String,byte[])>
<android.net.RouteInfo: void <init>(android.net.LinkAddress,java.net.InetAddress,java.lang.String)>
<android.transition.Transition: void end()>
<android.transition.TransitionSet: void runAnimators()>
<android.transition.Transition: void animate(android.animation.Animator)>
<android.transition.Transition: void runAnimators()>
<android.widget.AbsListView: void onLayout(boolean,int,int,int,int)>
<android.media.MediaRouter: void selectRoute(int,android.media.MediaRouter$RouteInfo)>
<android.renderscript.Sampler$Builder: void setAnisotropy(float)>
<android.renderscript.Sampler$Builder: void setMagnification(android.renderscript.Sampler$Value)>
<android.renderscript.Sampler$Builder: void setMinification(android.renderscript.Sampler$Value)>
<android.renderscript.Sampler$Builder: void setWrapS(android.renderscript.Sampler$Value)>
<android.renderscript.Sampler$Builder: void setWrapT(android.renderscript.Sampler$Value)>
<android.util.Base64: byte[] decode(byte[],int,int,int)>
<android.util.Base64: byte[] decode(byte[],int)>
<android.util.Base64: byte[] decode(java.lang.String,int)>
<android.util.Base64: java.lang.String encodeToString(byte[],int)>
<android.util.Base64: java.lang.String encodeToString(byte[],int,int,int)>
<android.opengl.Matrix: void frustumM(float[],int,float,float,float,float,float,float)>
<android.opengl.Matrix: void orthoM(float[],int,float,float,float,float,float,float)>
<android.text.method.WordIterator: int getEnd(int)>
<android.text.method.WordIterator: int following(int)>
<android.text.method.WordIterator: int preceding(int)>
<android.text.method.WordIterator: int getBeginning(int)>
<android.text.method.WordIterator: void setCharSequence(java.lang.CharSequence,int,int)>
<android.text.method.ArrowKeyMovementMethod: boolean leftWord(android.widget.TextView,android.text.Spannable)>
<android.text.method.ArrowKeyMovementMethod: boolean rightWord(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.style.TextAppearanceSpan: void <init>(android.content.Context,int,int)>
<android.text.style.TextAppearanceSpan: void <init>(android.content.Context,int)>
<android.provider.Settings$System: void getConfiguration(android.content.ContentResolver,android.content.res.Configuration)>
<android.content.res.Configuration: void setLocale(java.util.Locale)>
<android.text.style.LocaleSpan: void <init>(java.util.Locale)>
<android.text.method.AllCapsTransformationMethod: void <init>(android.content.Context)>
<android.widget.TextView: void setAllCaps(boolean)>
<android.widget.Switch: void setSwitchTextAppearance(android.content.Context,int)>
<android.appwidget.AppWidgetHostView: void setAppWidget(int,android.appwidget.AppWidgetProviderInfo)>
<android.content.Context: java.lang.String getString(int,java.lang.Object[])>
<android.content.res.Configuration: int diff(android.content.res.Configuration,boolean,boolean)>
<android.content.res.Configuration: int diff(android.content.res.Configuration)>
<android.content.res.Configuration: void writeToParcel(android.os.Parcel,int)>
<android.content.res.Configuration: java.lang.String toString()>
<android.content.res.Configuration: int compareTo(android.content.res.Configuration)>
<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>
<android.content.res.Configuration: boolean equals(java.lang.Object)>
<android.content.res.ResourcesKey: boolean hasOverrideConfiguration()>
<android.content.res.Configuration: void setTo(android.content.res.Configuration)>
<android.content.res.Configuration: void <init>(android.content.res.Configuration)>
<android.content.res.ResourcesKey: void <init>(java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],int,android.content.res.Configuration,android.content.res.CompatibilityInfo)>
<android.view.DisplayAdjustments: void <init>(android.content.res.Configuration)>
<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>
<android.graphics.Paint: void setTextLocale(java.util.Locale)>
<android.provider.Settings$Bookmarks: java.lang.CharSequence getTitle(android.content.Context,android.database.Cursor)>
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context,int)>
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context,android.renderscript.RenderScript$ContextType,int)>
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context,android.renderscript.RenderScript$ContextType)>
<android.renderscript.RenderScriptGL: void <init>(android.content.Context,android.renderscript.RenderScriptGL$SurfaceConfig)>
<android.renderscript.RSTextureView: android.renderscript.RenderScriptGL createRenderScriptGL(android.renderscript.RenderScriptGL$SurfaceConfig)>
<android.renderscript.RSSurfaceView: android.renderscript.RenderScriptGL createRenderScriptGL(android.renderscript.RenderScriptGL$SurfaceConfig)>
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context)>
<android.media.MediaCodecList: android.media.MediaCodecInfo getCodecInfoAt(int)>
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume(android.os.storage.StorageVolume[])>
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume()>
<android.os.Debug: void startMethodTracing()>
<android.os.Debug: void startMethodTracing(java.lang.String,int,int)>
<android.net.Uri: java.lang.String decode(java.lang.String)>
<android.webkit.URLUtil: java.lang.String guessFileName(java.lang.String,java.lang.String,java.lang.String)>
<android.media.audiofx.AudioEffect: void checkStatus(int)>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: void <init>(int,int,android.net.wifi.p2p.WifiP2pDevice,byte[])>
<android.preference.MultiSelectListPreference: void onPrepareDialogBuilder(android.app.AlertDialog$Builder)>
<android.media.audiofx.LoudnessEnhancer$Settings: void <init>(java.lang.String)>
<android.media.effect.effects.IdentityEffect: void setParameter(java.lang.String,java.lang.Object)>
<android.net.InterfaceConfiguration: void clearFlag(java.lang.String)>
<android.net.InterfaceConfiguration: void setFlag(java.lang.String)>
<android.net.InterfaceConfiguration: boolean hasFlag(java.lang.String)>
<android.renderscript.RenderScriptGL$SurfaceConfig: void setSamples(int,int,float)>
<android.util.Log: android.util.Log$TerribleFailureHandler setWtfHandler(android.util.Log$TerribleFailureHandler)>
<android.print.PageRange: void <init>(int,int)>
<android.renderscript.ScriptIntrinsicConvolve5x5: android.renderscript.ScriptIntrinsicConvolve5x5 create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.media.effect.FilterGraphEffect: void apply(int,int,int,int)>
<android.nfc.tech.NfcBarcode: android.nfc.tech.NfcBarcode get(android.nfc.Tag)>
<android.net.wifi.p2p.WifiP2pProvDiscEvent: void <init>(java.lang.String)>
<android.net.wifi.p2p.WifiP2pGroupList: void <init>(android.net.wifi.p2p.WifiP2pGroupList,android.net.wifi.p2p.WifiP2pGroupList$GroupDeleteListener)>
<android.os.FileUtils: boolean deleteOlderFiles(java.io.File,int,long)>
<android.media.SoundPool: int load(java.lang.String,int)>
<android.os.DropBoxManager$Entry: void <init>(java.lang.String,long,java.io.File,int)>
<android.os.ParcelFileDescriptor: int parseMode(java.lang.String)>
<android.media.SubtitleData: void <init>(int,long,long,byte[])>
<android.media.SubtitleData: void <init>(android.os.Parcel)>
<android.nfc.tech.MifareUltralight: void setTimeout(int)>
<android.media.MediaCodec: java.nio.ByteBuffer[] getInputBuffers()>
<android.media.MediaCodec: java.nio.ByteBuffer[] getOutputBuffers()>
<android.net.nsd.DnsSdTxtRecord: void set(java.lang.String,java.lang.String)>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo newInstance(java.lang.String,java.lang.String,java.util.Map)>
<android.media.MediaRouter$RouteGroup: void addRoute(android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter: void addRouteInt(android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter: void rebindAsUser(int)>
<android.media.MediaRouter: void addUserRoute(android.media.MediaRouter$UserRouteInfo)>
<android.media.MediaRouter$RouteGroup: void addRoute(android.media.MediaRouter$RouteInfo,int)>
<android.media.MediaRouter$RouteGroup: void removeRoute(android.media.MediaRouter$RouteInfo)>
<android.os.Trace: void beginSection(java.lang.String)>
<android.renderscript.ProgramVertex: android.renderscript.Element getInput(int)>
<android.net.NetworkStatsHistory$ParcelUtils: void writeLongArray(android.os.Parcel,long[],int)>
<android.net.NetworkStatsHistory: void writeToParcel(android.os.Parcel,int)>
<android.renderscript.Program$BaseProgramBuilder: android.renderscript.Program$BaseProgramBuilder setShader(android.content.res.Resources,int)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: boolean isStateful()>
<android.graphics.drawable.DrawableContainer: boolean isStateful()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void computeConstantSize()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantWidth()>
<android.graphics.drawable.DrawableContainer: int getIntrinsicWidth()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantMinimumHeight()>
<android.graphics.drawable.DrawableContainer: int getMinimumHeight()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantMinimumWidth()>
<android.graphics.drawable.DrawableContainer: int getMinimumWidth()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantHeight()>
<android.graphics.drawable.DrawableContainer: int getIntrinsicHeight()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.Rect getConstantPadding()>
<android.graphics.drawable.DrawableContainer: boolean getPadding(android.graphics.Rect)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getOpacity()>
<android.graphics.drawable.DrawableContainer: int getOpacity()>
<android.os.Parcel: void writeSparseArray(android.util.SparseArray)>
<android.os.Parcel: void writeValue(java.lang.Object)>
<android.os.Parcel: void writeArray(java.lang.Object[])>
<android.os.Parcel: void writeList(java.util.List)>
<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)>
<android.os.Parcel: void writeMap(java.util.Map)>
<android.content.pm.InstrumentationInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ComponentInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable getChild(int)>
<android.graphics.drawable.DrawableContainer: void setConstantState(android.graphics.drawable.DrawableContainer$DrawableContainerState)>
<android.graphics.drawable.StateListDrawable: android.graphics.drawable.Drawable getStateDrawable(int)>
<android.widget.PopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.ListPopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.graphics.drawable.AnimationDrawable: android.graphics.drawable.Drawable getFrame(int)>
<android.graphics.drawable.DrawableContainer: boolean selectDrawable(int)>
<android.graphics.drawable.LevelListDrawable: boolean onLevelChange(int)>
<android.graphics.drawable.StateListDrawable: boolean onStateChange(int[])>
<android.graphics.drawable.AnimationDrawable: void start()>
<android.graphics.drawable.AnimationDrawable: boolean setVisible(boolean,boolean)>
<android.os.BatteryStats: void dumpCheckinLocked(android.content.Context,java.io.PrintWriter,int,int,boolean)>
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)>
<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>
<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>
<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>
<android.view.ViewRootImpl: void dispatchInvalidateDelayed(android.view.View,long)>
<android.view.ViewRootImpl: void dispatchInvalidateRectDelayed(android.view.View$AttachInfo$InvalidateInfo,long)>
<android.os.Handler: boolean sendMessage(android.os.Message)>
<android.os.Handler: boolean post(java.lang.Runnable)>
<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>
<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>
<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>
<android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)>
<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>
<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>
<android.os.Looper: void quitSafely()>
<android.os.HandlerThread: boolean quitSafely()>
<android.os.Looper: void quit()>
<android.os.HandlerThread: boolean quit()>
<android.renderscript.Element$Builder: android.renderscript.Element$Builder add(android.renderscript.Element,java.lang.String,int)>
<android.renderscript.Element$Builder: android.renderscript.Element$Builder add(android.renderscript.Element,java.lang.String)>
<android.renderscript.ProgramVertexFixedFunction$Constants: void <init>(android.renderscript.RenderScript)>
<android.renderscript.Mesh$TriangleMeshBuilder: android.renderscript.Mesh create(boolean)>
<android.telephony.PhoneStateListener: void <init>(java.lang.Integer)>
<android.net.TrafficStats: void closeQuietly(android.net.INetworkStatsSession)>
<android.renderscript.Type$Builder: android.renderscript.Type create()>
<android.renderscript.Type$Builder: android.renderscript.Type$Builder setX(int)>
<android.renderscript.Type$Builder: android.renderscript.Type$Builder setY(int)>
<android.renderscript.Type$Builder: android.renderscript.Type$Builder setYuvFormat(int)>
<android.renderscript.Type$Builder: android.renderscript.Type$Builder setZ(int)>
<android.net.wifi.WifiManager: void connect(int,android.net.wifi.WifiManager$ActionListener)>
<android.net.wifi.WifiManager: void connect(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager$ActionListener)>
<android.net.wifi.WifiManager: void disable(int,android.net.wifi.WifiManager$ActionListener)>
<android.net.wifi.WifiManager: void forget(int,android.net.wifi.WifiManager$ActionListener)>
<android.net.wifi.WifiManager: void save(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager$ActionListener)>
<android.telephony.cdma.CdmaCellLocation: double convertQuartSecToDecDegrees(int)>
<android.nfc.tech.MifareClassic: android.nfc.tech.MifareClassic get(android.nfc.Tag)>
<android.nfc.tech.MifareClassic: void setTimeout(int)>
<android.nfc.tech.MifareClassic: int blockToSector(int)>
<android.nfc.tech.MifareClassic: int getBlockCountInSector(int)>
<android.media.audiofx.Equalizer$Settings: void <init>(java.lang.String)>
<android.media.FaceDetector$Face: float pose(int)>
<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>
<android.media.RemoteDisplay: android.media.RemoteDisplay listen(java.lang.String,android.media.RemoteDisplay$Listener,android.os.Handler,java.lang.String)>
<android.media.audiofx.Virtualizer$Settings: void <init>(java.lang.String)>
<android.renderscript.ScriptIntrinsicConvolve3x3: android.renderscript.ScriptIntrinsicConvolve3x3 create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.Element: android.renderscript.Element createPixel(android.renderscript.RenderScript,android.renderscript.Element$DataType,android.renderscript.Element$DataKind)>
<android.renderscript.Element: android.renderscript.Element createVector(android.renderscript.RenderScript,android.renderscript.Element$DataType,int)>
<android.renderscript.Element: android.renderscript.Element getSubElement(int)>
<android.renderscript.Element: int getSubElementArraySize(int)>
<android.renderscript.Element: java.lang.String getSubElementName(int)>
<android.renderscript.Element: int getSubElementOffsetBytes(int)>
<android.renderscript.ScriptC: void <init>(android.renderscript.RenderScript,android.content.res.Resources,int)>
<android.renderscript.ScriptC: void <init>(android.renderscript.RenderScript,java.lang.String,byte[],byte[])>
<android.net.Uri: android.net.Uri parse(java.lang.String)>
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,boolean,android.net.Uri,android.net.Uri)>
<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)>
<android.widget.SimpleAdapter: void setViewImage(android.widget.ImageView,java.lang.String)>
<android.widget.VideoView: void setVideoPath(java.lang.String)>
<android.content.SearchRecentSuggestionsProvider: void setupSuggestions(java.lang.String,int)>
<android.widget.SimpleCursorAdapter: void setViewImage(android.widget.ImageView,java.lang.String)>
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)>
<android.media.Ringtone: java.lang.String getTitle(android.content.Context,android.net.Uri,boolean,boolean)>
<android.preference.RingtonePreference: void onSetInitialValue(boolean,java.lang.Object)>
<android.preference.RingtonePreference: android.net.Uri onRestoreRingtone()>
<android.widget.SimpleCursorTreeAdapter: void setViewImage(android.widget.ImageView,java.lang.String)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addAddress(java.net.InetAddress,int)>
<android.os.StrictMode: android.os.StrictMode$Span enterCriticalSpan(java.lang.String)>
<android.widget.ScrollView: void fling(int)>
<android.widget.ScrollView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<android.os.StrictMode: void onFileUriExposed(android.net.Uri,java.lang.String)>
<android.net.Uri: void checkFileUriExposed(java.lang.String)>
<android.renderscript.FieldPacker: void addU16(int)>
<android.renderscript.FieldPacker: void addU32(long)>
<android.renderscript.FieldPacker: void addU64(long)>
<android.renderscript.FieldPacker: void addU8(short)>
<android.renderscript.FieldPacker: void align(int)>
<android.renderscript.FieldPacker: void addI32(int)>
<android.renderscript.FieldPacker: void addF32(float)>
<android.renderscript.FieldPacker: void addF32(android.renderscript.Float4)>
<android.renderscript.ScriptIntrinsicConvolve5x5: void setCoefficients(float[])>
<android.renderscript.ScriptIntrinsicColorMatrix: void setAdd(float,float,float,float)>
<android.renderscript.ScriptIntrinsicColorMatrix: void setAdd(android.renderscript.Float4)>
<android.renderscript.ScriptIntrinsicHistogram: void setDotCoefficients(float,float,float,float)>
<android.renderscript.ScriptIntrinsicConvolve3x3: void setCoefficients(float[])>
<android.renderscript.FieldPacker: void reset(int)>
<android.renderscript.FieldPacker: void skip(int)>
<android.renderscript.FieldPacker: void subalign(int)>
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: void <init>(java.util.List)>
<android.preference.Preference: void onRestoreInstanceState(android.os.Parcelable)>
<android.net.Uri$Builder: android.net.Uri build()>
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)>
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>
<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>
<android.content.SearchRecentSuggestionsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.provider.Contacts$People: void setPhotoData(android.content.ContentResolver,android.net.Uri,byte[])>
<android.provider.Contacts$People: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)>
<android.provider.Contacts$People: android.graphics.Bitmap loadContactPhoto(android.content.Context,android.net.Uri,int,android.graphics.BitmapFactory$Options)>
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)>
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)>
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>
<android.media.RingtoneManager: int getDefaultType(android.net.Uri)>
<android.media.RingtoneManager: boolean isDefault(android.net.Uri)>
<android.content.ContentProviderResult: void <init>(android.content.ContentProviderResult,int)>
<android.net.Uri: android.net.Uri normalizeScheme()>
<android.content.Intent: android.content.Intent setDataAndNormalize(android.net.Uri)>
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUri(java.lang.String,long)>
<android.media.MediaScanner: void <init>(android.content.Context,java.lang.String)>
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String,long)>
<android.provider.MediaStore$Video$Media: android.net.Uri getContentUri(java.lang.String,long)>
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String,long)>
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String,long)>
<android.media.MediaScanner: void scanMtpFile(java.lang.String,int,int)>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)>
<android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>
<android.app.DownloadManager: android.net.Uri getDownloadUri(long)>
<android.provider.MediaStore$Video$Thumbnails: void cancelThumbnailRequest(android.content.ContentResolver,long)>
<android.provider.MediaStore$Video$Thumbnails: void cancelThumbnailRequest(android.content.ContentResolver,long,long)>
<android.provider.MediaStore$Images$Thumbnails: void cancelThumbnailRequest(android.content.ContentResolver,long)>
<android.provider.MediaStore$Images$Thumbnails: void cancelThumbnailRequest(android.content.ContentResolver,long,long)>
<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri(long)>
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])>
<android.preference.MultiCheckPreference: void onPrepareDialogBuilder(android.app.AlertDialog$Builder)>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest newInstance(java.lang.String)>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest newInstance(java.lang.String,java.lang.String)>
<android.util.Spline: android.util.Spline createMonotoneCubicSpline(float[],float[])>
<android.opengl.ETC1Util: void loadTexture(int,int,int,int,int,android.opengl.ETC1Util$ETC1Texture)>
<android.opengl.ETC1Util: void loadTexture(int,int,int,int,int,java.io.InputStream)>
<android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$System: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>
<android.text.format.DateFormat: boolean is24HourFormat(android.content.Context,int)>
<android.text.format.DateFormat: java.lang.String getTimeFormatString(android.content.Context,int)>
<android.text.format.DateFormat: java.lang.String getTimeFormatString(android.content.Context)>
<android.text.format.DateFormat: boolean is24HourFormat(android.content.Context)>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeDateTimeString(android.content.Context,long,long,long,int)>
<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$System: long getLongForUser(android.content.ContentResolver,java.lang.String,long,int)>
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String,long)>
<android.provider.Settings$System: long getLongForUser(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$System: boolean getShowGTalkServiceStatusForUser(android.content.ContentResolver,int)>
<android.provider.Settings$System: boolean getShowGTalkServiceStatus(android.content.ContentResolver)>
<android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)>
<android.hardware.input.InputManager: int getPointerSpeed(android.content.Context)>
<android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings$Secure: boolean isLocationProviderEnabled(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
<android.view.accessibility.CaptioningManager$CaptionStyle: android.view.accessibility.CaptioningManager$CaptionStyle getCustomStyle(android.content.ContentResolver)>
<android.view.accessibility.CaptioningManager: android.view.accessibility.CaptioningManager$CaptionStyle getUserStyle()>
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)>
<android.nfc.cardemulation.CardEmulation: int getSelectionModeForCategory(java.lang.String)>
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>
<android.view.accessibility.CaptioningManager: java.lang.String getRawLocale()>
<android.speech.tts.TtsEngines: java.util.Locale getLocalePrefForEngine(java.lang.String)>
<android.speech.tts.TtsEngines: java.lang.String getDefaultEngine()>
<android.provider.Settings$Secure: long getLongForUser(android.content.ContentResolver,java.lang.String,long,int)>
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String,long)>
<android.provider.Settings$Secure: long getLongForUser(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>
<android.view.accessibility.CaptioningManager: boolean isEnabled()>
<android.view.accessibility.CaptioningManager: int getRawUserStyle()>
<android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$Secure: float getFloatForUser(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$Secure: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String,float)>
<android.view.accessibility.CaptioningManager: float getFontScale()>
<android.provider.Settings$Global: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>
<android.os.storage.StorageManager: long getStorageLowBytes(java.io.File)>
<android.os.storage.StorageManager: long getStorageFullBytes(java.io.File)>
<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String)>
<android.app.DownloadManager: java.lang.Long getMaxBytesOverMobile(android.content.Context)>
<android.app.DownloadManager: java.lang.Long getRecommendedMaxBytesOverMobile(android.content.Context)>
<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>
<android.app.ApplicationErrorReport: android.content.ComponentName getErrorReportReceiver(android.content.Context,java.lang.String,int)>
<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String)>
<android.net.wifi.SupplicantState: boolean isConnecting(android.net.wifi.SupplicantState)>
<android.net.wifi.SupplicantState: boolean isDriverActive(android.net.wifi.SupplicantState)>
<android.net.wifi.SupplicantState: boolean isHandshakeState(android.net.wifi.SupplicantState)>
<android.print.PrinterInfo$Builder: android.print.PrinterInfo$Builder setStatus(int)>
<android.os.WorkSource: void <init>(int,java.lang.String)>
<android.os.WorkSource: boolean add(int)>
<android.os.WorkSource: boolean add(int,java.lang.String)>
<android.os.WorkSource: boolean remove(android.os.WorkSource)>
<android.os.WorkSource: void set(int,java.lang.String)>
<android.renderscript.ScriptIntrinsic3DLUT: android.renderscript.ScriptIntrinsic3DLUT create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsic3DLUT: void setLUT(android.renderscript.Allocation)>
<android.media.AudioManager: void unregisterMediaButtonIntent(android.app.PendingIntent)>
<android.media.AudioManager: void registerMediaButtonIntent(android.app.PendingIntent,android.content.ComponentName)>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: void <init>(int,java.lang.String)>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: android.net.wifi.p2p.nsd.WifiP2pServiceRequest newInstance(int)>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: android.net.wifi.p2p.nsd.WifiP2pServiceRequest newInstance(int,java.lang.String)>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest: void <init>()>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest: android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest newInstance()>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest: void <init>(java.lang.String)>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest newInstance()>
<android.os.Process: android.os.Process$ProcessStartResult start(java.lang.String,java.lang.String,int,int,int[],int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>
<android.nfc.tech.IsoDep: void setTimeout(int)>
<android.media.FaceDetector: int findFaces(android.graphics.Bitmap,android.media.FaceDetector$Face[])>
<android.text.TextUtils: boolean regionMatches(java.lang.CharSequence,int,java.lang.CharSequence,int,int)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>
<android.util.SparseBooleanArray: int keyAt(int)>
<android.net.NetworkStats: int[] getUniqueUids()>
<android.util.SparseBooleanArray: java.lang.String toString()>
<android.util.SparseBooleanArray: boolean valueAt(int)>
<android.widget.AbsListView: boolean performItemClick(android.view.View,int,long)>
<android.service.notification.StatusBarNotification: void <init>(java.lang.String,java.lang.String,int,java.lang.String,int,int,int,android.app.Notification,android.os.UserHandle,long)>
<android.service.notification.StatusBarNotification: void <init>(java.lang.String,java.lang.String,int,java.lang.String,int,int,android.app.Notification,android.os.UserHandle,java.lang.String,long)>
<android.service.notification.StatusBarNotification: android.service.notification.StatusBarNotification cloneLight()>
<android.service.notification.StatusBarNotification: android.service.notification.StatusBarNotification clone()>
<android.service.notification.StatusBarNotification: java.lang.Object clone()>
<android.media.MediaMuxer: int addTrack(android.media.MediaFormat)>
<android.media.MediaMuxer: void setLocation(float,float)>
<android.media.MediaMuxer: void setOrientationHint(int)>
<android.media.MediaMuxer: void start()>
<android.media.MediaMuxer: void stop()>
<android.media.MediaMuxer: void writeSampleData(int,java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo)>
<android.util.MonthDisplayHelper: void <init>(int,int,int)>
<android.util.MonthDisplayHelper: int[] getDigitsForRow(int)>
<android.media.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities getCapabilitiesForType(java.lang.String)>
<android.media.audiofx.BassBoost$Settings: void <init>(java.lang.String)>
<android.webkit.URLUtil: java.lang.String guessUrl(java.lang.String)>
<android.security.KeyStore: android.security.KeyStore getInstance()>
<android.security.KeyChain: boolean isBoundKeyAlgorithm(java.lang.String)>
<android.security.KeyStore: android.security.KeyStore$State state(int)>
<android.text.TextUtils$SimpleStringSplitter: void remove()>
<android.os.StatFs: void <init>(java.lang.String)>
<android.os.StatFs: void restat(java.lang.String)>
<android.print.PrintAttributes$Resolution: void <init>(java.lang.String,java.lang.String,int,int)>
<android.transition.Transition: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.Recolor: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.TransitionSet: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.ChangeBounds: void <init>(android.content.Context,android.util.AttributeSet)>
<android.opengl.GLUtils: int getInternalFormat(android.graphics.Bitmap)>
<android.opengl.GLUtils: int getType(android.graphics.Bitmap)>
<android.opengl.GLUtils: void texSubImage2D(int,int,int,int,android.graphics.Bitmap)>
<android.opengl.GLUtils: void texImage2D(int,int,int,android.graphics.Bitmap,int)>
<android.opengl.GLUtils: void texImage2D(int,int,int,android.graphics.Bitmap,int,int)>
<android.opengl.GLUtils: void texImage2D(int,int,android.graphics.Bitmap,int)>
<android.opengl.GLUtils: void texSubImage2D(int,int,int,int,android.graphics.Bitmap,int,int)>
<android.media.MediaPlayer: void <init>()>
<android.widget.VideoView: int getAudioSessionId()>
<android.media.SoundPool: void <init>(int,int,int)>
<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri,int)>
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)>
<android.media.MediaPlayer: void setAudioStreamType(int)>
<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,int,int)>
<android.os.Looper: void loop()>
<android.os.HandlerThread: void run()>
<android.os.Looper: void prepare()>
<android.os.Looper: void prepareMainLooper()>
<android.view.InputQueue: void <init>()>
<android.content.res.Resources: void <init>(java.lang.ClassLoader)>
<android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)>
<android.os.Parcel: void readBinderArray(android.os.IBinder[])>
<android.os.Parcel: void readBooleanArray(boolean[])>
<android.os.Parcel: void readByteArray(byte[])>
<android.os.Parcel: void readCharArray(char[])>
<android.os.Parcel: void readDoubleArray(double[])>
<android.os.Parcel: void readFloatArray(float[])>
<android.os.Parcel: void readIntArray(int[])>
<android.os.Parcel: void readLongArray(long[])>
<android.content.SyncStatusInfo: void <init>(android.os.Parcel)>
<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>
<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>
<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>
<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>
<android.os.Parcel: java.io.Serializable readSerializable()>
<android.os.StrictMode$ViolationInfo: void <init>(android.os.Parcel,boolean)>
<android.os.Parcel: int readExceptionCode()>
<android.os.Parcel: void readStringArray(java.lang.String[])>
<android.os.Parcel: void readTypedArray(java.lang.Object[],android.os.Parcelable$Creator)>
<android.view.DisplayInfo: void readFromParcel(android.os.Parcel)>
<android.os.Parcel: void writeException(java.lang.Exception)>
<android.os.Parcel: void writeSerializable(java.io.Serializable)>
<android.content.ContentValues: void writeToParcel(android.os.Parcel,int)>
<android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)>
<android.os.StrictMode$ViolationInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.VerifierInfo: void writeToParcel(android.os.Parcel,int)>
<android.security.KeyPairGeneratorSpec$Builder: void <init>(android.content.Context)>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setAlgorithmParameterSpec(java.security.spec.AlgorithmParameterSpec)>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setAlias(java.lang.String)>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setEndDate(java.util.Date)>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setKeySize(int)>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setSerialNumber(java.math.BigInteger)>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setStartDate(java.util.Date)>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setSubject(javax.security.auth.x500.X500Principal)>
<android.media.audiofx.EnvironmentalReverb$Settings: void <init>(java.lang.String)>
<android.transition.TransitionSet: android.transition.TransitionSet setOrdering(int)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addDnsServer(java.net.InetAddress)>
<android.net.VpnService$Builder: android.os.ParcelFileDescriptor establish()>
<android.net.VpnService$Builder: android.net.VpnService$Builder setMtu(int)>
<android.os.RemoteCallback: void <init>(android.os.RemoteCallback$OnResultListener,android.os.Handler)>
<android.sax.Element: android.sax.Element getChild(java.lang.String,java.lang.String)>
<android.sax.Element: void setEndElementListener(android.sax.EndElementListener)>
<android.sax.Element: void setEndTextElementListener(android.sax.EndTextElementListener)>
<android.sax.Element: void setStartElementListener(android.sax.StartElementListener)>
<android.preference.PreferenceCategory: boolean onPrepareAddPreference(android.preference.Preference)>
<android.net.wifi.p2p.WifiP2pConfig: void <init>(java.lang.String)>
<android.opengl.EGLObjectHandle: int getHandle()>
<android.os.ParcelFileDescriptor: void <init>(java.io.FileDescriptor,java.io.FileDescriptor)>
<android.os.ParcelFileDescriptor: void <init>(java.io.FileDescriptor)>
<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)>
<android.os.ParcelFileDescriptor: int detachFd()>
<android.os.ParcelFileDescriptor: int getFd()>
<android.media.Metadata: boolean has(int)>
<android.media.AudioTrack: boolean getTimestamp(android.media.AudioTimestamp)>
<android.nfc.NdefMessage: void <init>(android.nfc.NdefRecord,android.nfc.NdefRecord[])>
<android.nfc.NdefMessage: void <init>(android.nfc.NdefRecord[])>
<android.media.MediaRecorder: void setAudioChannels(int)>
<android.media.MediaRecorder: void setAudioEncodingBitRate(int)>
<android.media.MediaRecorder: void setAudioSamplingRate(int)>
<android.media.MediaRecorder: void setLocation(float,float)>
<android.media.MediaRecorder: void setOrientationHint(int)>
<android.media.MediaRecorder: void setVideoEncodingBitRate(int)>
<android.net.wifi.WifiConfiguration: int getAuthType()>
<android.net.wifi.WifiConfiguration: java.lang.String getKeyIdForCredentials(android.net.wifi.WifiConfiguration)>
<android.media.ThumbnailUtils: android.graphics.Bitmap createVideoThumbnail(java.lang.String,int)>
<android.text.format.Time: void <init>(java.lang.String)>
<android.text.format.Time: void clear(java.lang.String)>
<android.text.format.Time: int compare(android.text.format.Time,android.text.format.Time)>
<android.text.format.Time: boolean after(android.text.format.Time)>
<android.text.format.Time: boolean before(android.text.format.Time)>
<android.text.format.Time: int getActualMaximum(int)>
<android.text.format.Time: boolean parse(java.lang.String)>
<android.text.format.Time: boolean parse3339(java.lang.String)>
<android.print.PrintManager$PrintDocumentAdapterDelegate: void <init>(android.app.Activity,android.print.PrintDocumentAdapter)>
<android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>
<android.provider.DocumentsProvider: java.lang.String getType(android.net.Uri)>
<android.provider.DocumentsContract: java.lang.String getRootId(android.net.Uri)>
<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type$CubemapFace)>
<android.renderscript.AllocationAdapter: void setLOD(int)>
<android.renderscript.AllocationAdapter: void setY(int)>
<android.renderscript.AllocationAdapter: void setZ(int)>
<android.os.Bundle: void putFloatArray(java.lang.String,float[])>
<android.transition.Transition: void createAnimators(android.view.ViewGroup,android.transition.TransitionValuesMaps,android.transition.TransitionValuesMaps,java.util.ArrayList,java.util.ArrayList)>
<android.transition.TransitionSet: void createAnimators(android.view.ViewGroup,android.transition.TransitionValuesMaps,android.transition.TransitionValuesMaps,java.util.ArrayList,java.util.ArrayList)>
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>
<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.app.Notification$Builder: android.app.Notification buildUnstyled()>
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>
<android.appwidget.AppWidgetHostView: void dispatchSaveInstanceState(android.util.SparseArray)>
<android.content.UndoManager: android.content.UndoOwner getOwner(java.lang.String,java.lang.Object)>
<android.transition.TransitionManager: void setTransition(android.transition.Scene,android.transition.Scene,android.transition.Transition)>
<android.transition.TransitionManager: void setTransition(android.transition.Scene,android.transition.Transition)>
<android.animation.AnimatorSet: android.animation.AnimatorSet clone()>
<android.animation.AnimatorSet: java.lang.Object clone()>
<android.animation.AnimatorSet: android.animation.Animator clone()>
<android.animation.ValueAnimator: void resume()>
<android.animation.AnimatorSet: void resume()>
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>
<android.os.Bundle: void putIBinder(java.lang.String,android.os.IBinder)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.IBinder)>
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])>
<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.List,java.lang.String[],java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
<android.provider.ContactsContract$QuickContact: android.content.Intent composeQuickContactsIntent(android.content.Context,android.graphics.Rect,android.net.Uri,int,java.lang.String[])>
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder after(android.animation.Animator)>
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder 'with'(android.animation.Animator)>
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder before(android.animation.Animator)>
<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>
<android.app.ActivityOptions: android.os.Bundle toBundle()>
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>
<android.app.Dialog: android.os.Bundle onSaveInstanceState()>
<android.app.LocalActivityManager: android.os.Bundle saveInstanceState()>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)>
<android.preference.PreferenceActivity: android.content.Intent onBuildStartFragmentIntent(java.lang.String,android.os.Bundle,int,int)>
<android.app.SearchDialog: android.os.Bundle onSaveInstanceState()>
<android.os.Bundle: void putByte(java.lang.String,byte)>
<android.os.Bundle: void putByteArray(java.lang.String,byte[])>
<android.nfc.cardemulation.HostApduService: void sendResponseApdu(byte[])>
<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)>
<android.os.Bundle: void putChar(java.lang.String,char)>
<android.os.Bundle: void putFloat(java.lang.String,float)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence,android.content.IntentSender)>
<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.drawable.Icon)>
<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.Bitmap)>
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>
<android.os.Bundle: void putShort(java.lang.String,short)>
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>
<android.content.ContentValues: void putNull(java.lang.String)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValue(java.lang.String,java.lang.Object)>
<android.provider.SyncStateContract$Helpers: android.content.ContentProviderOperation newSetOperation(android.net.Uri,android.accounts.Account,byte[])>
<android.app.DownloadManager: void restartDownload(long[])>
<android.content.ContentValues: void put(java.lang.String,java.lang.String)>
<android.provider.BrowserContract$Settings: void setSyncEnabled(android.content.Context,boolean)>
<android.provider.Settings$Bookmarks: android.net.Uri add(android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,char,int)>
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.Settings$NameValueTable: boolean putString(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)>
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Byte)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Short)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>
<android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>
<android.content.ContentProviderOperation: android.content.ContentValues resolveValueBackReferences(android.content.ContentProviderResult[],int)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Float)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Double)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>
<android.content.ContentValues: void put(java.lang.String,byte[])>
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.BrowserContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.SyncStateContract$Helpers: android.content.ContentProviderOperation newUpdateOperation(android.net.Uri,byte[])>
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>
<android.preference.PreferenceActivity: void startPreferencePanel(java.lang.String,android.os.Bundle,int,java.lang.CharSequence,android.app.Fragment,int)>
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String)>
<android.content.ContentValues: void <init>(android.content.ContentValues)>
<android.os.Bundle: void putAll(android.os.Bundle)>
<android.content.SyncRequest: void <init>(android.content.SyncRequest$Builder)>
<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.app.Instrumentation: void finish(int,android.os.Bundle)>
<android.content.ContentValues: void putAll(android.content.ContentValues)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValues(android.content.ContentValues)>
<android.animation.AnimatorSet: void <init>()>
<android.transition.ChangeText: android.animation.Animator createAnimator(android.view.ViewGroup,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.transition.Crossfade: android.animation.Animator createAnimator(android.view.ViewGroup,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.content.pm.PackageParser$Package: void <init>(android.os.Parcel)>
<android.content.pm.PackageParser: android.content.pm.PackageParser$PackageLite parsePackageLite(java.io.File,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>
<android.accounts.GrantCredentialsPermissionActivity: void onClick(android.view.View)>
<android.content.SyncRequest$Builder: android.content.SyncRequest build()>
<android.app.Notification$Builder: void <init>(android.content.Context,android.app.Notification)>
<android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>
<android.app.Notification$Builder: void <init>(android.content.Context)>
<android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean,int)>
<android.provider.Settings$System: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>
<android.provider.Settings$Global: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>
<android.os.PerformanceCollector: android.os.Bundle addIteration(java.lang.String)>
<android.app.Instrumentation: android.os.Bundle getAllocCounts()>
<android.app.Instrumentation: android.os.Bundle getBinderCounts()>
<android.appwidget.AppWidgetHostView: void updateAppWidgetSize(android.os.Bundle,int,int,int,int,boolean)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.net.wifi.p2p.WifiP2pManager: void setWifiP2pChannels(android.net.wifi.p2p.WifiP2pManager$Channel,int,int,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>
<android.provider.Browser: void sendString(android.content.Context,java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.os.Bundle sanitizeResult(android.os.Bundle)>
<android.accounts.AccountAuthenticatorResponse: void onResult(android.os.Bundle)>
<android.os.Bundle: android.os.Bundle forPair(java.lang.String,java.lang.String)>
<android.accounts.ChooseAccountActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)>
<android.accounts.ChooseTypeAndAccountActivity: void run(android.accounts.AccountManagerFuture)>
<android.app.Notification$Builder: android.app.Notification$Builder setStyle(android.app.Notification$Style)>
<android.accounts.ChooseAccountTypeActivity: void onCreate(android.os.Bundle)>
<android.os.Bundle: void remove(java.lang.String)>
<android.service.wallpaper.WallpaperService$Engine: void <init>(android.service.wallpaper.WallpaperService,java.util.function.Supplier,android.os.Handler)>
<android.transition.TransitionValues: void <init>()>
<android.transition.TransitionValues: void <init>(android.view.View)>
<android.transition.Transition: android.transition.Transition clone()>
<android.transition.Transition: void <init>()>
<android.app.ApplicationLoaders: void <init>()>
<android.media.AudioManager: void <init>()>
<android.media.AudioManager: void <init>(android.content.Context)>
<android.media.MediaRecorder: void <init>()>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int,android.media.AudioAttributes,int)>
<android.os.PowerManager: void <init>(android.content.Context,android.os.IPowerManager,android.os.Handler)>
<android.app.ApplicationPackageManager: void <init>(android.app.ContextImpl,android.content.pm.IPackageManager)>
<android.printservice.PrinterDiscoverySession: void <init>()>
<android.net.nsd.NsdServiceInfo: void <init>()>
<android.net.nsd.NsdServiceInfo: void <init>(java.lang.String,java.lang.String)>
<android.app.ResourcesManager: void <init>()>
<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.transition.TransitionManager: void <init>()>
<android.content.ContentValues: void <init>()>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValueBackReference(java.lang.String,int)>
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)>
<android.view.accessibility.AccessibilityManager: void <init>(android.content.Context,android.view.accessibility.IAccessibilityManager,int)>
<android.view.accessibility.AccessibilityManager: void <init>(android.os.Handler,android.view.accessibility.IAccessibilityManager,int)>
<android.transition.Transition: void resume(android.view.View)>
<android.transition.Transition: void pause(android.view.View)>
<android.content.UndoManager: void <init>()>
<android.transition.Transition: android.transition.TransitionValues getTransitionValues(android.view.View,boolean)>
<android.app.ActivityThread: android.app.Activity getActivity(android.os.IBinder)>
<android.app.ActivityThread: void handleTranslucentConversionComplete(android.os.IBinder,boolean)>
<android.app.ActivityThread: void performRestartActivity(android.os.IBinder,boolean)>
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)>
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>
<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>
<android.animation.AnimatorSet: void end()>
<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>
<android.content.ContentValues: boolean containsKey(java.lang.String)>
<android.content.ContentValues: void clear()>
<android.transition.TransitionSet: void pause(android.view.View)>
<android.transition.TransitionSet: void resume(android.view.View)>
<android.animation.ValueAnimator: void start()>
<android.animation.ValueAnimator: void reverse()>
<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.ArrayList,java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
<android.provider.ContactsContract$QuickContact: android.content.Intent composeQuickContactsIntent(android.content.Context,android.view.View,android.net.Uri,int,java.lang.String[])>
<android.animation.AnimatorSet: android.animation.AnimatorSet$Builder play(android.animation.Animator)>
<android.animation.AnimatorSet: void playTogether(android.animation.Animator[])>
<android.animation.AnimatorSet: void playTogether(java.util.Collection)>
<android.animation.AnimatorSet: void playSequentially(android.animation.Animator[])>
<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)>
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>
<android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.provider.Settings$System: boolean putConfigurationForUser(android.content.ContentResolver,android.content.res.Configuration,int)>
<android.provider.Settings$System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Settings$System: boolean putLongForUser(android.content.ContentResolver,java.lang.String,long,int)>
<android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>
<android.provider.Settings$System: boolean putFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>
<android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Settings$Global: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>
<android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.provider.Browser: void sendString(android.content.Context,java.lang.String)>
<android.animation.ValueAnimator: boolean doAnimationFrame(long)>
<android.content.Intent: void removeExtra(java.lang.String)>
<android.app.Notification: void lightenPayload()>
<android.util.SparseLongArray: int keyAt(int)>
<android.util.SparseLongArray: long valueAt(int)>
<android.media.effect.EffectFactory: android.media.effect.Effect createEffect(java.lang.String)>
<android.renderscript.Mesh$TriangleMeshBuilder: void <init>(android.renderscript.RenderScript,int,int)>
<android.renderscript.Mesh$TriangleMeshBuilder: android.renderscript.Mesh$TriangleMeshBuilder addTriangle(int,int,int)>
<android.renderscript.Mesh$TriangleMeshBuilder: android.renderscript.Mesh$TriangleMeshBuilder addVertex(float,float)>
<android.renderscript.Mesh$TriangleMeshBuilder: android.renderscript.Mesh$TriangleMeshBuilder addVertex(float,float,float)>
<android.renderscript.Mesh$TriangleMeshBuilder: android.renderscript.Mesh$TriangleMeshBuilder setColor(float,float,float,float)>
<android.renderscript.Mesh$TriangleMeshBuilder: android.renderscript.Mesh$TriangleMeshBuilder setNormal(float,float,float)>
<android.renderscript.Mesh$TriangleMeshBuilder: android.renderscript.Mesh$TriangleMeshBuilder setTexture(float,float)>
<android.os.PowerManager: void validateWakeLockParameters(int,java.lang.String)>
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>
<android.util.JsonReader: void <init>(java.io.Reader)>
<android.util.SparseIntArray: int keyAt(int)>
<android.util.SparseIntArray: java.lang.String toString()>
<android.util.SparseIntArray: int valueAt(int)>
<android.os.DropBoxManager$Entry: void <init>(java.lang.String,long)>
<android.os.DropBoxManager$Entry: void <init>(java.lang.String,long,android.os.ParcelFileDescriptor,int)>
<android.os.DropBoxManager$Entry: void <init>(java.lang.String,long,java.lang.String)>
<android.os.DropBoxManager$Entry: void <init>(java.lang.String,long,byte[],int)>
<android.print.PrintDocumentInfo$Builder: void <init>(java.lang.String)>
<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo$Builder setPageCount(int)>
<android.text.AndroidBidi: int bidi(int,char[],byte[])>
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,android.media.AudioAttributes)>
<android.media.AsyncPlayer: void setUsesWakeLock(android.content.Context)>
<android.net.wifi.WifiEnterpriseConfig: void setCaCertificate(java.security.cert.X509Certificate)>
<android.net.wifi.WifiEnterpriseConfig: void setEapMethod(int)>
<android.net.wifi.WifiEnterpriseConfig: void setPhase2Method(int)>
<android.media.MediaDrm$ProvisionRequest: byte[] getData()>
<android.media.MediaDrm$ProvisionRequest: java.lang.String getDefaultUrl()>
<android.util.JsonWriter: void <init>(java.io.Writer)>
<android.net.LocalSocket: android.net.LocalSocketAddress getRemoteSocketAddress()>
<android.net.LocalSocket: boolean isClosed()>
<android.net.LocalSocket: boolean isInputShutdown()>
<android.net.LocalSocket: boolean isOutputShutdown()>
<android.text.format.Time: java.lang.String toString()>
<android.text.format.Time: long normalize(boolean)>
<android.text.format.Time: int getWeekNumber()>
<android.text.format.Time: long toMillis(boolean)>
<android.widget.DateTimeView: void setTime(long)>
<android.text.format.Time: void <init>(android.text.format.Time)>
<android.text.format.Time: void <init>()>
<android.widget.AnalogClock: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AnalogClock: void onAttachedToWindow()>
<android.text.format.DateUtils: boolean isToday(long)>
<android.text.format.Time: void set(long)>
<android.net.SSLCertificateSocketFactory: byte[] getAlpnSelectedProtocol(java.net.Socket)>
<android.net.SSLCertificateSocketFactory: void setUseSessionTickets(java.net.Socket,boolean)>
<android.net.SSLCertificateSocketFactory: void setHostname(java.net.Socket,java.lang.String)>
<android.net.SSLCertificateSocketFactory: byte[] getNpnSelectedProtocol(java.net.Socket)>
<android.net.SSLCertificateSocketFactory: byte[] toLengthPrefixedList(byte[][])>
<android.net.SSLCertificateSocketFactory: void setAlpnProtocols(byte[][])>
<android.net.SSLCertificateSocketFactory: void setNpnProtocols(byte[][])>
<android.os.ServiceManager: void initServiceCache(java.util.Map)>
<android.os.SystemProperties: void set(java.lang.String,java.lang.String)>
<android.os.SystemService: void restart(java.lang.String)>
<android.os.SystemService: void stop(java.lang.String)>
<android.os.SystemService: void start(java.lang.String)>
<android.net.LinkAddress: void <init>(java.net.InetAddress,int,int,int)>
<android.net.LinkAddress: void <init>(java.net.InetAddress,int)>
<android.telephony.PhoneNumberFormattingTextWatcher: void <init>(java.lang.String)>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy build()>
<android.os.StrictMode: void enableDefaults()>
<android.nfc.tech.Ndef: android.nfc.tech.Ndef get(android.nfc.Tag)>
<android.net.NetworkInfo: void <init>(int,int,java.lang.String,java.lang.String)>
<android.renderscript.ScriptIntrinsicColorMatrix: void forEach(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.media.TimedText: void <init>(android.os.Parcel)>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.ScriptIntrinsicBlend create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicLUT: android.renderscript.ScriptIntrinsicLUT create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicColorMatrix: android.renderscript.ScriptIntrinsicColorMatrix create(android.renderscript.RenderScript)>
<android.renderscript.ScriptIntrinsicColorMatrix: android.renderscript.ScriptIntrinsicColorMatrix create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.ScriptIntrinsicHistogram create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicBlur: android.renderscript.ScriptIntrinsicBlur create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicYuvToRGB: android.renderscript.ScriptIntrinsicYuvToRGB create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.net.wifi.p2p.WifiP2pManager: void addLocalService(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void startWps(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.WpsInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void setUpnpServiceResponseListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener)>
<android.net.wifi.p2p.WifiP2pManager: void setServiceResponseListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener)>
<android.net.wifi.p2p.WifiP2pManager: void setDnsSdResponseListeners(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener,android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener)>
<android.net.wifi.p2p.WifiP2pManager: void setDeviceName(android.net.wifi.p2p.WifiP2pManager$Channel,java.lang.String,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void requestPersistentGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PersistentGroupInfoListener)>
<android.net.wifi.p2p.WifiP2pManager: void requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PeerListListener)>
<android.net.wifi.p2p.WifiP2pManager: void requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$GroupInfoListener)>
<android.net.wifi.p2p.WifiP2pManager: void requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener)>
<android.net.wifi.p2p.WifiP2pManager: void removeServiceRequest(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void removeLocalService(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void removeGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void listen(android.net.wifi.p2p.WifiP2pManager$Channel,boolean,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void discoverServices(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void discoverPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void deletePersistentGroup(android.net.wifi.p2p.WifiP2pManager$Channel,int,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void createGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void createGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void connect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void clearServiceRequests(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void clearLocalServices(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void cancelConnect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.net.wifi.p2p.WifiP2pManager: void addServiceRequest(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager$ActionListener)>
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCD(java.lang.String)>
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String,int)>
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String)>
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCDWithLength(java.lang.String)>
<android.os.UEventObserver: void startObserving(java.lang.String)>
<android.renderscript.ScriptIntrinsicHistogram: void forEach(android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicHistogram: void forEach_Dot(android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicHistogram: void setOutput(android.renderscript.Allocation)>
<android.util.Base64InputStream: void mark(int)>
<android.util.Base64InputStream: void reset()>
<android.os.Message: void recycle()>
<android.os.Message: void writeToParcel(android.os.Parcel,int)>
<android.renderscript.ScriptIntrinsicBlur: void forEach(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlur: void forEach(android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlur: void setInput(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlur: void setRadius(float)>
<android.renderscript.Font: android.renderscript.Font createFromAsset(android.renderscript.RenderScript,android.content.res.Resources,java.lang.String,float)>
<android.renderscript.Font: android.renderscript.Font createFromFile(android.renderscript.RenderScript,android.content.res.Resources,java.lang.String,float)>
<android.renderscript.Font: android.renderscript.Font create(android.renderscript.RenderScript,android.content.res.Resources,java.lang.String,android.renderscript.Font$Style,float)>
<android.renderscript.Font: android.renderscript.Font createFromFile(android.renderscript.RenderScript,android.content.res.Resources,java.io.File,float)>
<android.renderscript.Font: android.renderscript.Font createFromResource(android.renderscript.RenderScript,android.content.res.Resources,int,float)>
<android.preference.PreferenceActivity: boolean isValidFragment(java.lang.String)>
<android.preference.PreferenceActivity: android.preference.PreferenceActivity$Header onGetInitialHeader()>
<android.preference.PreferenceActivity: void switchToHeader(android.preference.PreferenceActivity$Header)>
<android.renderscript.Type$Builder: void <init>(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.BaseObj: void destroy()>
<android.renderscript.Script: void setVar(int,android.renderscript.BaseObj)>
<android.renderscript.Element$Builder: android.renderscript.Element create()>
<android.renderscript.Script: void setVar(int,float)>
<android.renderscript.Script: void setVar(int,android.renderscript.FieldPacker)>
<android.renderscript.Mesh$Builder: android.renderscript.Mesh create()>
<android.renderscript.BaseObj: void setName(java.lang.String)>
<android.speech.SpeechRecognizer: void cancel()>
<android.speech.SpeechRecognizer: void stopListening()>
<android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)>
<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context)>
<android.renderscript.Script$LaunchOptions: android.renderscript.Script$LaunchOptions setX(int,int)>
<android.renderscript.Script$LaunchOptions: android.renderscript.Script$LaunchOptions setY(int,int)>
<android.renderscript.Script$LaunchOptions: android.renderscript.Script$LaunchOptions setZ(int,int)>
<android.net.NetworkUtils: java.net.InetAddress intToInetAddress(int)>
<android.text.format.Formatter: java.lang.String formatIpAddress(int)>
<android.net.DhcpInfo: java.lang.String toString()>
<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)>
<android.util.LongSparseLongArray: long keyAt(int)>
<android.util.LongSparseLongArray: java.lang.String toString()>
<android.util.LongSparseLongArray: long valueAt(int)>
<android.text.SpannedString: void <init>(java.lang.CharSequence,boolean)>
<android.text.SpannableString: void <init>(java.lang.CharSequence,boolean)>
<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)>
<android.text.SpannableString: java.lang.CharSequence subSequence(int,int)>
<android.text.SpannedString: void <init>(java.lang.CharSequence)>
<android.text.SpannedString: java.lang.CharSequence subSequence(int,int)>
<android.text.SpannableString: void <init>(java.lang.CharSequence)>
<android.print.PrintFileDocumentAdapter: void <init>(android.content.Context,java.io.File,android.print.PrintDocumentInfo)>
<android.net.NetworkUtils: java.net.InetAddress getNetworkPart(java.net.InetAddress,int)>
<android.net.LinkAddress: void <init>(java.lang.String,int,int)>
<android.text.StaticLayout: android.text.Layout$Directions getLineDirections(int)>
<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,android.text.TextDirectionHeuristic,float,float)>
<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>
<android.text.Layout: void increaseWidthTo(int)>
<android.media.CameraProfile: int getJpegEncodingQualityParameter(int,int)>
<android.media.CameraProfile: int getJpegEncodingQualityParameter(int)>
<android.renderscript.ScriptGroup: void setInput(android.renderscript.Script$KernelID,android.renderscript.Allocation)>
<android.renderscript.ScriptGroup: void setOutput(android.renderscript.Script$KernelID,android.renderscript.Allocation)>
<android.provider.Contacts$ContactMethods: java.lang.Object decodeImProtocol(java.lang.String)>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder setClassInstanceLimit(java.lang.Class,int)>
<android.os.Parcel: android.os.Bundle readBundle()>
<android.nfc.tech.NfcA: void setTimeout(int)>
<android.nfc.tech.NfcF: void setTimeout(int)>
<android.app.LocalActivityManager: android.view.Window startActivity(java.lang.String,android.content.Intent)>
<android.drm.DrmInfo: void <init>(int,java.lang.String,java.lang.String)>
<android.drm.DrmInfo: void <init>(int,byte[],java.lang.String)>
<android.location.Criteria: void setAccuracy(int)>
<android.location.Criteria: void setBearingAccuracy(int)>
<android.location.Criteria: void setHorizontalAccuracy(int)>
<android.location.Criteria: void setPowerRequirement(int)>
<android.location.Criteria: void setSpeedAccuracy(int)>
<android.location.Criteria: void setVerticalAccuracy(int)>
<android.content.ComponentName: void <init>(android.content.Context,java.lang.String)>
<android.app.Service: boolean stopSelfResult(int)>
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>
<android.app.Activity: android.content.Intent getParentActivityIntent()>
<android.app.Service: void startForeground(int,android.app.Notification)>
<android.app.Service: void startForeground(int,android.app.Notification,int)>
<android.app.Service: void stopForeground(int)>
<android.app.Service: void stopSelf(int)>
<android.content.ComponentName: void <init>(android.os.Parcel)>
<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>
<android.content.ComponentName: android.content.ComponentName clone()>
<android.content.ComponentName: java.lang.Object clone()>
<android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>
<android.net.VpnService: android.content.Intent prepare(android.content.Context)>
<android.widget.ActivityChooserModel$HistoricalRecord: void <init>(java.lang.String,long,float)>
<android.nfc.cardemulation.ApduServiceInfo: android.content.ComponentName getComponent()>
<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>
<android.content.Intent: android.content.ComponentName resolveSystemService(android.content.pm.PackageManager,int)>
<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>
<android.security.KeyChain: android.content.Intent createInstallIntent()>
<android.speech.tts.TtsEngines: android.content.Intent getSettingsIntent(java.lang.String)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.content.ComponentName)>
<android.printservice.PrintServiceInfo: void <init>(android.content.pm.ResolveInfo,java.lang.String,java.lang.String,java.lang.String)>
<android.printservice.PrintServiceInfo: android.printservice.PrintServiceInfo create(android.content.Context,android.content.pm.ResolveInfo)>
<android.accessibilityservice.AccessibilityServiceInfo: void <init>(android.content.pm.ResolveInfo,android.content.Context)>
<android.view.textservice.SpellCheckerInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>
<android.view.textservice.SpellCheckerInfo: android.content.ComponentName getComponent()>
<android.app.WallpaperInfo: android.content.ComponentName getComponent()>
<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>
<android.speech.RecognizerIntent: android.content.Intent getVoiceDetailsIntent(android.content.Context)>
<android.view.inputmethod.InputMethodInfo: void <init>(android.content.pm.ResolveInfo,boolean,java.lang.String,java.util.List,int,boolean,boolean,boolean)>
<android.view.inputmethod.InputMethodInfo: android.content.ComponentName getComponent()>
<android.app.SearchableInfo: android.app.SearchableInfo getActivityMetaData(android.content.Context,android.content.pm.ActivityInfo,int)>
<android.view.inputmethod.InputMethodInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo,java.util.List)>
<android.drm.DrmInfoRequest: void <init>(int,java.lang.String)>
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableCaptureRequestKeys()>
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableCaptureResultKeys()>
<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.content.pm.ApplicationInfo: android.graphics.drawable.Drawable loadDefaultIcon(android.content.pm.PackageManager)>
<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>
<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>
<android.content.res.TypedArray: int getColor(int,int)>
<android.widget.EdgeEffect: void <init>(android.content.Context)>
<android.widget.ScrollView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.HorizontalScrollView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AbsListView: void <init>(android.content.Context)>
<android.filterfw.core.FilterPort: void assertPortIsOpen()>
<android.filterfw.core.FilterPort: void checkFrameManager(android.filterfw.core.Frame,android.filterfw.core.FilterContext)>
<android.filterfw.core.FilterPort: void checkFrameType(android.filterfw.core.Frame,boolean)>
<android.hardware.camera2.CaptureResult: void <init>(android.hardware.camera2.impl.CameraMetadataNative,int)>
<android.hardware.camera2.CaptureResult: void <init>(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.camera2.CaptureRequest,android.hardware.camera2.impl.CaptureResultExtras)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
<android.filterfw.format.ObjectFormat: android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class,int,int)>
<android.filterfw.format.ObjectFormat: android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class,int)>
<android.filterpacks.imageproc.DrawRectFilter: void setupPorts()>
<android.filterpacks.imageproc.CropFilter: void setupPorts()>
<android.filterpacks.text.ToUpperCase: void setupPorts()>
<android.filterpacks.text.StringLogger: void setupPorts()>
<android.filterpacks.imageproc.DrawOverlayFilter: void setupPorts()>
<android.filterpacks.text.StringSource: void setupPorts()>
<android.filterpacks.numeric.SinWaveFilter: void setupPorts()>
<android.filterpacks.performance.ThroughputFilter: void setupPorts()>
<android.filterfw.core.Filter: void addProgramPort(java.lang.String,java.lang.String,java.lang.reflect.Field,java.lang.Class,boolean)>
<android.filterfw.core.Filter: void addFieldPort(java.lang.String,java.lang.reflect.Field,boolean,boolean)>
<android.filterfw.format.ObjectFormat: android.filterfw.core.MutableFrameFormat fromObject(java.lang.Object,int,int)>
<android.filterfw.format.ObjectFormat: android.filterfw.core.MutableFrameFormat fromObject(java.lang.Object,int)>
<android.filterpacks.base.ObjectSource: void process(android.filterfw.core.FilterContext)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>
<android.filterpacks.imageproc.BlendFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)>
<android.content.SyncAdapterType: android.content.SyncAdapterType newKey(java.lang.String,java.lang.String)>
<android.content.SyncAdapterType: void <init>(java.lang.String,java.lang.String,boolean,boolean)>
<android.content.SyncAdapterType: void <init>(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,java.lang.String)>
<android.content.SyncAdapterType: void <init>(android.os.Parcel)>
<android.content.SyncAdapterType: boolean allowParallelSyncs()>
<android.content.SyncAdapterType: java.lang.String getSettingsActivity()>
<android.content.SyncAdapterType: boolean isAlwaysSyncable()>
<android.content.SyncAdapterType: boolean isUserVisible()>
<android.content.SyncAdapterType: boolean supportsUploading()>
<android.content.SyncAdapterType: void writeToParcel(android.os.Parcel,int)>
<android.app.ListFragment: void setEmptyText(java.lang.CharSequence)>
<android.filterpacks.imageproc.DocumentaryFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.graphics.PathMeasure: boolean getPosTan(float,float[],float[])>
<android.graphics.Shader: void <init>(android.graphics.ColorSpace)>
<android.graphics.LinearGradient: void <init>(float,float,float,float,int[],float[],android.graphics.Shader$TileMode)>
<android.graphics.drawable.GradientDrawable: void draw(android.graphics.Canvas)>
<android.graphics.LinearGradient: void <init>(float,float,float,float,long[],float[],android.graphics.Shader$TileMode)>
<android.graphics.LinearGradient: void <init>(float,float,float,float,long,long,android.graphics.Shader$TileMode)>
<android.graphics.LinearGradient: void <init>(float,float,float,float,int,int,android.graphics.Shader$TileMode)>
<android.graphics.SweepGradient: void <init>(float,float,int[],float[])>
<android.graphics.RadialGradient: void <init>(float,float,float,int[],float[],android.graphics.Shader$TileMode)>
<android.graphics.SweepGradient: void <init>(float,float,long[],float[])>
<android.graphics.RadialGradient: void <init>(float,float,float,long[],float[],android.graphics.Shader$TileMode)>
<android.database.sqlite.SQLiteDatabaseConfiguration: void <init>(android.database.sqlite.SQLiteDatabaseConfiguration)>
<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool open(android.database.sqlite.SQLiteDatabaseConfiguration)>
<android.database.sqlite.SQLiteDatabaseConfiguration: void <init>(java.lang.String,int)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.database.sqlite.SQLiteDatabaseConfiguration: void updateParametersFrom(android.database.sqlite.SQLiteDatabaseConfiguration)>
<android.hardware.location.GeofenceHardware: boolean addGeofence(int,int,android.hardware.location.GeofenceHardwareRequest,android.hardware.location.GeofenceHardwareCallback)>
<android.bluetooth.BluetoothGattServer: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothGattServer: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothGattServer: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothGattServer: boolean notifyCharacteristicChanged(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothGattCharacteristic,boolean)>
<android.content.Intent: android.content.Intent setPackage(java.lang.String)>
<android.app.WallpaperManager: android.content.Intent getCropAndSetWallpaperIntent(android.net.Uri)>
<android.speech.tts.TtsEngines: android.speech.tts.TextToSpeech$EngineInfo getEngineInfo(java.lang.String)>
<android.telephony.CellIdentityCdma: void <init>(int,int,int,int,int,java.lang.String,java.lang.String)>
<android.telephony.CellIdentityCdma: void <init>(android.hardware.radio.V1_2.CellIdentityCdma)>
<android.telephony.CellIdentityCdma: void <init>(android.hardware.radio.V1_0.CellIdentityCdma)>
<android.telephony.CellIdentityWcdma: void <init>()>
<android.telephony.CellInfoWcdma: void <init>()>
<android.telephony.CellIdentityWcdma: void <init>(int,int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.CellIdentityWcdma: void <init>(android.hardware.radio.V1_2.CellIdentityWcdma)>
<android.telephony.CellIdentityWcdma: void <init>(android.hardware.radio.V1_0.CellIdentityWcdma)>
<android.telephony.CellIdentityLte: void <init>()>
<android.telephony.CellInfoLte: void <init>()>
<android.telephony.CellIdentityLte: void <init>(int,int,int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.CellIdentityLte: void <init>(android.hardware.radio.V1_2.CellIdentityLte)>
<android.telephony.CellIdentityLte: void <init>(android.hardware.radio.V1_0.CellIdentityLte)>
<android.telephony.CellIdentityGsm: void <init>()>
<android.telephony.CellInfoGsm: void <init>()>
<android.telephony.CellIdentityGsm: void <init>(int,int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.CellIdentityGsm: void <init>(android.hardware.radio.V1_2.CellIdentityGsm)>
<android.telephony.CellIdentityGsm: void <init>(android.hardware.radio.V1_0.CellIdentityGsm)>
<android.telephony.CellIdentityCdma: void <init>()>
<android.telephony.CellInfoCdma: void <init>()>
<android.content.Intent: void setSelector(android.content.Intent)>
<android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)>
<android.hardware.Camera$Parameters: void getFocusDistances(float[])>
<android.hardware.Camera$Parameters: void getPreviewFpsRange(int[])>
<android.hardware.Camera$Parameters: void setPictureFormat(int)>
<android.hardware.Camera$Parameters: void setPreviewFormat(int)>
<android.hardware.Camera$Parameters: void setRotation(int)>
<android.accounts.Account: void <init>(android.os.Parcel)>
<android.accounts.Account: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>
<android.content.SyncInfo: void <init>(android.content.SyncInfo)>
<android.location.Location: double convert(java.lang.String)>
<android.location.Location: java.lang.String convert(double,int)>
<android.location.Location: void distanceBetween(double,double,double,double,float[])>
<android.filterpacks.imageproc.GrainFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterpacks.imageproc.NegativeFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.database.CursorJoiner: void <init>(android.database.Cursor,java.lang.String[],android.database.Cursor,java.lang.String[])>
<android.database.CursorJoiner: android.database.CursorJoiner$Result next()>
<android.database.CursorJoiner: boolean hasNext()>
<android.database.CursorJoiner: void remove()>
<android.app.UiAutomation: void <init>(android.os.Looper,android.app.IUiAutomationConnection)>
<android.app.Instrumentation: android.app.UiAutomation getUiAutomation(int)>
<android.app.UiAutomation: void connect(int)>
<android.app.UiAutomation: boolean setRotation(int)>
<android.graphics.Canvas: void <init>(long)>
<android.graphics.pdf.PdfDocument: android.graphics.pdf.PdfDocument$Page startPage(android.graphics.pdf.PdfDocument$PageInfo)>
<android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)>
<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>
<android.media.ThumbnailUtils: android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap,int,int,int)>
<android.media.ThumbnailUtils: android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap,int,int)>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int,int,boolean,float,float,int)>
<android.gesture.Gesture: android.graphics.Bitmap toBitmap(int,int,int,int)>
<android.gesture.Gesture: android.graphics.Bitmap toBitmap(int,int,int,int,int)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture,int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture)>
<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipPath(android.graphics.Path)>
<android.graphics.Canvas: boolean clipRect(android.graphics.RectF,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)>
<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>
<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)>
<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>
<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int)>
<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)>
<android.graphics.Canvas: void restore()>
<android.graphics.drawable.BitmapDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.ClipDrawable: void draw(android.graphics.Canvas)>
<android.graphics.Canvas: void restoreToCount(int)>
<android.graphics.drawable.ShapeDrawable: void draw(android.graphics.Canvas)>
<android.widget.EdgeEffect: boolean draw(android.graphics.Canvas)>
<android.widget.ImageView: void onDraw(android.graphics.Canvas)>
<android.widget.ListView: boolean drawChild(android.graphics.Canvas,android.view.View,long)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>
<android.graphics.drawable.NinePatchDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.AnimatedRotateDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.RotateDrawable: void draw(android.graphics.Canvas)>
<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>
<android.filterfw.GraphEnvironment: android.filterfw.core.FilterGraph getGraph(int)>
<android.filterfw.GraphEnvironment: android.filterfw.core.GraphRunner getRunner(int,int)>
<android.filterfw.GraphEnvironment: int loadGraph(android.content.Context,int)>
<android.filterfw.core.KeyValueMap: void setKeyValues(java.lang.Object[])>
<android.filterfw.core.Filter: void initWithAssignmentList(java.lang.Object[])>
<android.filterfw.core.KeyValueMap: android.filterfw.core.KeyValueMap fromKeyValues(java.lang.Object[])>
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame executeWithArgList(java.lang.Object[])>
<android.content.pm.ResolveInfo: java.lang.String toString()>
<android.app.MediaRouteActionProvider: android.view.View onCreateActionView()>
<android.graphics.Bitmap: void eraseColor(long)>
<android.graphics.Paint: int getColor()>
<android.graphics.Paint: void setShadowLayer(float,float,float,long)>
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>
<android.widget.TextView: void setShadowLayer(float,float,float,int)>
<android.graphics.Paint: void setColor(long)>
<android.graphics.Paint: void setAlpha(int)>
<android.graphics.drawable.BitmapDrawable: void setAlpha(int)>
<android.graphics.drawable.NinePatchDrawable: void setAlpha(int)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)>
<android.view.TextureView: android.graphics.Bitmap getBitmap(int,int)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)>
<android.bluetooth.BluetoothManager: void <init>(android.content.Context)>
<android.bluetooth.BluetoothManager: java.util.List getConnectedDevices(int)>
<android.bluetooth.BluetoothManager: java.util.List getDevicesMatchingConnectionStates(int,int[])>
<android.bluetooth.BluetoothManager: android.bluetooth.BluetoothGattServer openGattServer(android.content.Context,android.bluetooth.BluetoothGattServerCallback,int)>
<android.filterpacks.imageproc.ColorTemperatureFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.content.ContextWrapper: void attachBaseContext(android.content.Context)>
<android.app.ActivityManager: boolean switchUser(android.os.UserHandle)>
<android.filterpacks.imageproc.RedEyeFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.hardware.usb.UsbDeviceConnection: int bulkTransfer(android.hardware.usb.UsbEndpoint,byte[],int,int,int)>
<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int,int)>
<android.graphics.pdf.PdfDocument: void finishPage(android.graphics.pdf.PdfDocument$Page)>
<android.database.sqlite.SQLiteDirectCursorDriver: android.database.Cursor query(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String[])>
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>
<android.database.sqlite.SQLiteProgram: void bindAllArgsAsStrings(java.lang.String[])>
<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])>
<android.hardware.display.WifiDisplay: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int noteOp(int,int,java.lang.String)>
<android.app.AppOpsManager: int startOp(int,int,java.lang.String,boolean)>
<android.app.AppOpsManager: int checkOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: void startWatchingMode(java.lang.String,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)>
<android.app.AppOpsManager: void startWatchingMode(java.lang.String,java.lang.String,int,android.app.AppOpsManager$OnOpChangedListener)>
<android.app.AppOpsManager: int startOpNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int startOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: java.lang.String opToPermission(java.lang.String)>
<android.app.AppOpsManager: int opToDefaultMode(java.lang.String)>
<android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: void finishOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int checkOpNoThrow(java.lang.String,int,java.lang.String)>
<android.app.backup.BackupDataInput: void <init>(java.io.FileDescriptor)>
<android.app.backup.BackupDataInput: int getDataSize()>
<android.app.backup.BackupDataInput: java.lang.String getKey()>
<android.filterpacks.imageproc.ToRGBFilter: void createProgram(android.filterfw.core.FilterContext,android.filterfw.core.FrameFormat)>
<android.filterpacks.imageproc.SaturateFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.inputmethodservice.InputMethodService$InputMethodImpl: void attachToken(android.os.IBinder)>
<android.filterpacks.imageproc.LomoishFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterpacks.ui.SurfaceTargetFilter: void setupPorts()>
<android.filterpacks.ui.SurfaceTargetFilter: void updateRenderMode()>
<android.filterpacks.imageproc.BlackWhiteFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean,java.lang.String[])>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>
<android.accounts.ChooseTypeAndAccountActivity: void runAddAccountForAuthenticator(java.lang.String)>
<android.accounts.ChooseTypeAndAccountActivity: void onActivityResult(int,int,android.content.Intent)>
<android.accounts.GrantCredentialsPermissionActivity: void onCreate(android.os.Bundle)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: void removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.view.ViewGroup: void dispatchGetDisplayList()>
<android.filterpacks.imageproc.TintFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterpacks.imageproc.ToRGBAFilter: void createProgram(android.filterfw.core.FilterContext,android.filterfw.core.FrameFormat)>
<android.content.res.TypedArray: boolean getBoolean(int,boolean)>
<android.widget.ListView: void <init>(android.content.Context)>
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.PopupWindow: void <init>(android.content.Context)>
<android.widget.ListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ListPopupWindow: void <init>(android.content.Context)>
<android.widget.AutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet,int,int,android.content.res.Resources$Theme)>
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet,int,int,int,android.content.res.Resources$Theme)>
<android.widget.LinearLayout: void <init>(android.content.Context)>
<android.content.pm.PackageParser$Provider: void <init>(android.content.pm.PackageParser$ParseComponentArgs,android.content.pm.ProviderInfo)>
<android.content.pm.PackageParser$Activity: void <init>(android.content.pm.PackageParser$ParseComponentArgs,android.content.pm.ActivityInfo)>
<android.content.pm.PackageParser$Service: void <init>(android.content.pm.PackageParser$ParseComponentArgs,android.content.pm.ServiceInfo)>
<android.content.res.TypedArray: float getDimension(int,float)>
<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
<android.widget.AbsoluteLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsoluteLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.LinearLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TableLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TableLayout: android.widget.TableLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.LinearLayout: android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.LinearLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.RadioGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RadioGroup: android.widget.RadioGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.TableRow$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TableRow: android.widget.TableRow$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.FrameLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.FrameLayout: android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.appwidget.AppWidgetHostView: android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.appwidget.AppWidgetHostView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.preference.PreferenceFrameLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.PreferenceFrameLayout: android.preference.PreferenceFrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.GridLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.GridLayout: android.widget.GridLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.RelativeLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RelativeLayout: android.widget.RelativeLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.content.res.TypedArray: float getFloat(int,float)>
<android.content.res.TypedArray: float getFraction(int,int,int,float)>
<android.content.res.TypedArray: int getIndex(int)>
<android.content.res.TypedArray: int getIndexCount()>
<android.content.res.TypedArray: int getInt(int,int)>
<android.view.animation.GridLayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.LayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)>
<android.app.AlertDialog: void <init>(android.content.Context)>
<android.content.res.TypedArray: int getInteger(int,int)>
<android.content.res.TypedArray: int getLayoutDimension(int,int)>
<android.widget.GridLayout$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>
<android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)>
<android.widget.TableRow$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>
<android.widget.RadioGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>
<android.widget.TableLayout$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>
<android.view.ViewGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>
<android.view.ViewGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.Gallery$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Gallery: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.AbsListView$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsListView: android.widget.AbsListView$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.content.res.TypedArray: java.lang.String getNonConfigurationString(int,int)>
<android.content.pm.PackageParser$Instrumentation: void <init>(android.content.pm.PackageParser$ParsePackageItemArgs,android.content.pm.InstrumentationInfo)>
<android.content.res.TypedArray: java.lang.String getNonResourceString(int)>
<android.content.res.TypedArray: java.lang.String getPositionDescription()>
<android.content.res.TypedArray: int getResourceId(int,int)>
<android.content.res.TypedArray: android.content.res.Resources getResources()>
<android.content.res.TypedArray: java.lang.String getString(int)>
<android.content.res.TypedArray: java.lang.CharSequence getText(int)>
<android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)>
<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>
<android.content.res.TypedArray: boolean hasValue(int)>
<android.content.res.TypedArray: int length()>
<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>
<android.content.res.TypedArray: void recycle()>
<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.content.pm.VerifierInfo: void <init>(java.lang.String,java.security.PublicKey)>
<android.graphics.SurfaceTexture: void attachToGLContext(int)>
<android.graphics.SurfaceTexture: void detachFromGLContext()>
<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(byte[])>
<android.graphics.drawable.shapes.RoundRectShape: void <init>(float[],android.graphics.RectF,float[])>
<android.graphics.drawable.PaintDrawable: void setCornerRadii(float[])>
<android.inputmethodservice.SoftInputWindow: void setToken(android.os.IBinder)>
<android.database.AbstractCursor: void checkPosition()>
<android.database.AbstractWindowedCursor: void checkPosition()>
<android.database.AbstractWindowedCursor: java.lang.String getString(int)>
<android.database.AbstractCursor: byte[] getBlob(int)>
<android.database.AbstractCursor: int getColumnIndexOrThrow(java.lang.String)>
<android.content.pm.KeySet: void <init>(android.os.IBinder)>
<android.location.LocationProvider: void <init>(java.lang.String,com.android.internal.location.ProviderProperties)>
<android.filterpacks.base.InputStreamSource: void process(android.filterfw.core.FilterContext)>
<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>
<android.database.sqlite.SQLiteConnection: android.os.ParcelFileDescriptor executeForBlobFileDescriptor(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>
<android.database.sqlite.SQLiteConnection: int executeForChangedRowCount(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>
<android.database.sqlite.SQLiteConnection: int executeForCursorWindow(java.lang.String,java.lang.Object[],android.database.CursorWindow,int,int,boolean,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteConnection: long executeForLastInsertedRowId(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>
<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>
<android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>
<android.database.sqlite.SQLiteConnection: void prepare(java.lang.String,android.database.sqlite.SQLiteStatementInfo)>
<android.filterpacks.imageproc.ImageStitcher: void process(android.filterfw.core.FilterContext)>
<android.app.TaskStackBuilder: int startActivities(android.os.Bundle,android.os.UserHandle)>
<android.app.TaskStackBuilder: void startActivities(android.os.Bundle)>
<android.app.TaskStackBuilder: void startActivities()>
<android.app.Activity: boolean onNavigateUp()>
<android.filterfw.format.ImageFormat: int bytesPerSampleForColorspace(int)>
<android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int)>
<android.filterpacks.base.GLTextureTarget: void setupPorts()>
<android.filterpacks.imageproc.CrossProcessFilter: void setupPorts()>
<android.filterpacks.imageproc.FillLightFilter: void setupPorts()>
<android.filterpacks.imageproc.DuotoneFilter: void setupPorts()>
<android.filterpacks.imageproc.BitmapOverlayFilter: void setupPorts()>
<android.filterpacks.imageproc.StraightenFilter: void setupPorts()>
<android.filterpacks.imageproc.SharpenFilter: void setupPorts()>
<android.filterpacks.imageproc.CropRectFilter: void setupPorts()>
<android.filterpacks.imageproc.SepiaFilter: void setupPorts()>
<android.filterpacks.imageproc.PosterizeFilter: void setupPorts()>
<android.filterpacks.ui.SurfaceRenderFilter: void setupPorts()>
<android.filterpacks.imageproc.AutoFixFilter: void setupPorts()>
<android.filterpacks.imageproc.SimpleImageFilter: void setupPorts()>
<android.filterpacks.imageproc.FlipFilter: void setupPorts()>
<android.filterpacks.imageproc.ImageCombineFilter: void setupPorts()>
<android.filterpacks.imageproc.ResizeFilter: void setupPorts()>
<android.filterpacks.imageproc.VignetteFilter: void setupPorts()>
<android.filterpacks.imageproc.FisheyeFilter: void setupPorts()>
<android.filterpacks.imageproc.RotateFilter: void setupPorts()>
<android.filterpacks.imageproc.TintFilter: void setupPorts()>
<android.filterpacks.imageproc.BlackWhiteFilter: void setupPorts()>
<android.filterpacks.imageproc.LomoishFilter: void setupPorts()>
<android.filterpacks.imageproc.SaturateFilter: void setupPorts()>
<android.filterpacks.imageproc.RedEyeFilter: void setupPorts()>
<android.filterpacks.imageproc.ColorTemperatureFilter: void setupPorts()>
<android.filterpacks.imageproc.NegativeFilter: void setupPorts()>
<android.filterpacks.imageproc.GrainFilter: void setupPorts()>
<android.filterpacks.imageproc.DocumentaryFilter: void setupPorts()>
<android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int,int,int)>
<android.filterpacks.base.GLTextureTarget: void process(android.filterfw.core.FilterContext)>
<android.filterpacks.base.GLTextureSource: void process(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.CropRectFilter: void process(android.filterfw.core.FilterContext)>
<android.filterpacks.ui.SurfaceRenderFilter: void prepare(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.AutoFixFilter: void prepare(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.RotateFilter: void process(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.BitmapSource: void loadImage(android.filterfw.core.FilterContext)>
<android.filterpacks.ui.SurfaceTargetFilter: void prepare(android.filterfw.core.FilterContext)>
<android.media.effect.FilterEffect: android.filterfw.core.Frame frameFromTexture(int,int,int)>
<android.filterpacks.imageproc.GrainFilter: void process(android.filterfw.core.FilterContext)>
<android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int)>
<android.filterpacks.imageproc.ToPackedGrayFilter: void setupPorts()>
<android.filterpacks.videoproc.BackDropperFilter: void setupPorts()>
<android.filterpacks.base.GLTextureSource: void setupPorts()>
<android.filterpacks.imageproc.ToGrayFilter: void setupPorts()>
<android.filterpacks.imageproc.FixedRotationFilter: void setupPorts()>
<android.filterpacks.videosrc.MediaSource: void setupPorts()>
<android.filterpacks.imageproc.ImageEncoder: void setupPorts()>
<android.filterpacks.videosrc.CameraSource: void setupPorts()>
<android.filterpacks.videosink.MediaEncoderFilter: void setupPorts()>
<android.filterpacks.videosrc.SurfaceTextureSource: void setupPorts()>
<android.filterpacks.imageproc.ImageStitcher: void setupPorts()>
<android.filterpacks.imageproc.BitmapSource: void setupPorts()>
<android.filterpacks.imageproc.ImageSlicer: void setupPorts()>
<android.database.MatrixCursor: void addRow(java.lang.Iterable)>
<android.database.MatrixCursor: void addRow(java.lang.Object[])>
<android.filterfw.core.GLFrame: void focus()>
<android.filterfw.core.GLFrame: void generateMipMap()>
<android.filterfw.core.GLFrame: android.graphics.Bitmap getBitmap()>
<android.filterfw.core.SimpleFrameManager: android.filterfw.core.Frame newBoundFrame(android.filterfw.core.FrameFormat,int,long)>
<android.filterfw.core.GLFrame: void reset(android.filterfw.core.FrameFormat)>
<android.filterfw.core.GLFrame: void setBitmap(android.graphics.Bitmap)>
<android.filterfw.core.GLFrame: void setData(java.nio.ByteBuffer,int,int)>
<android.filterfw.core.GLFrame: void setDataFromFrame(android.filterfw.core.Frame)>
<android.filterfw.core.GLFrame: void setFloats(float[])>
<android.filterfw.core.GLFrame: void setInts(int[])>
<android.filterfw.core.GLFrame: void setTextureParameter(int,int)>
<android.graphics.RegionIterator: boolean next(android.graphics.Rect)>
<android.content.UndoManager: void addOperation(android.content.UndoOperation,int)>
<android.widget.Editor$UndoInputFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
<android.content.UndoManager: int forgetRedos(android.content.UndoOwner[],int)>
<android.content.UndoManager: void endUpdate()>
<android.content.UndoManager: int commitState(android.content.UndoOwner)>
<android.content.UndoManager: int forgetUndos(android.content.UndoOwner[],int)>
<android.content.UndoManager: android.content.UndoOperation getLastOperation(java.lang.Class,android.content.UndoOwner,int)>
<android.widget.Editor: void onCommitCorrection(android.view.inputmethod.CorrectionInfo)>
<android.app.DialogFragment: void onActivityCreated(android.os.Bundle)>
<android.app.ExpandableListActivity: void onContentChanged()>
<android.app.AlarmManager: void cancel(android.app.AlarmManager$OnAlarmListener)>
<android.database.sqlite.SQLiteCursor: void <init>(android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>
<android.database.sqlite.SQLiteCursor: boolean onMove(int,int)>
<android.database.sqlite.SQLiteCursor: int getCount()>
<android.filterpacks.videosrc.SurfaceTextureSource: void process(android.filterfw.core.FilterContext)>
<android.animation.Animator: android.animation.Animator clone()>
<android.animation.ValueAnimator: android.animation.ValueAnimator clone()>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator clone()>
<android.animation.ObjectAnimator: android.animation.Animator clone()>
<android.animation.ObjectAnimator: android.animation.ValueAnimator clone()>
<android.animation.ObjectAnimator: java.lang.Object clone()>
<android.animation.LayoutTransition: void <init>()>
<android.preference.PreferenceActivity: void onCreate(android.os.Bundle)>
<android.app.FragmentBreadCrumbs: void setActivity(android.app.Activity)>
<android.animation.ValueAnimator: android.animation.Animator clone()>
<android.animation.ValueAnimator: java.lang.Object clone()>
<android.animation.AnimatorSet: void start()>
<android.graphics.LargeBitmap: android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.Color: int HSVToColor(int,float[])>
<android.graphics.Color: int HSVToColor(float[])>
<android.graphics.Color: void RGBToHSV(int,int,int,float[])>
<android.graphics.Color: void colorToHSV(int,float[])>
<android.graphics.Color: int parseColor(java.lang.String)>
<android.graphics.NinePatch: android.graphics.Region getTransparentRegion(android.graphics.Rect)>
<android.graphics.drawable.NinePatchDrawable: android.graphics.Region getTransparentRegion()>
<android.graphics.Region: void <init>()>
<android.content.res.CompatibilityInfo$Translator: android.graphics.Region getTranslatedTouchableArea(android.graphics.Region)>
<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>
<android.graphics.Path: void addRect(android.graphics.RectF,android.graphics.Path$Direction)>
<android.graphics.Region: android.graphics.Region obtain()>
<android.graphics.Region: android.graphics.Region obtain(android.graphics.Region)>
<android.view.ViewTreeObserver$InternalInsetsInfo: void <init>()>
<android.inputmethodservice.InputMethodService$Insets: void <init>()>
<android.inputmethodservice.InputMethodService: void <init>()>
<android.graphics.Region: void <init>(android.graphics.Region)>
<android.graphics.Path: void set(android.graphics.Path)>
<android.graphics.Path: void <init>(android.graphics.Path)>
<android.graphics.Region: boolean getBounds(android.graphics.Rect)>
<android.graphics.Region: void writeToParcel(android.os.Parcel,int)>
<android.app.Instrumentation: void checkStartActivityResult(int,java.lang.Object)>
<android.app.Instrumentation: int execStartActivitiesAsUser(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent[],android.os.Bundle,int)>
<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)>
<android.app.ActivityThread: android.content.pm.ActivityInfo resolveActivityInfo(android.content.Intent)>
<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,java.lang.String,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>
<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,java.lang.String,android.content.Intent,int,android.os.Bundle)>
<android.app.Instrumentation: void start()>
<android.accounts.AuthenticatorDescription: void <init>(java.lang.String,java.lang.String,int,int,int,int,boolean)>
<android.accounts.AuthenticatorDescription: android.accounts.AuthenticatorDescription newKey(java.lang.String)>
<android.filterfw.core.FilterGraph: void connect(android.filterfw.core.Filter,java.lang.String,android.filterfw.core.Filter,java.lang.String)>
<android.filterfw.core.FilterGraph: void connect(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>
<android.filterpacks.imageproc.CrossProcessFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterpacks.imageproc.Invert: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.BlendFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.ToPackedGrayFilter: void prepare(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.BrightnessFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)>
<android.filterpacks.videosrc.SurfaceTextureSource: void prepare(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.FisheyeFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterpacks.imageproc.AlphaBlendFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)>
<android.filterpacks.videosrc.CameraSource: void prepare(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.VignetteFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterpacks.videosrc.MediaSource: void prepare(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.AutoFixFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterpacks.imageproc.PosterizeFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterpacks.imageproc.SepiaFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterpacks.imageproc.ToGrayFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.SharpenFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterpacks.imageproc.ContrastFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.BitmapOverlayFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterpacks.imageproc.CropFilter: void createProgram(android.filterfw.core.FilterContext,android.filterfw.core.FrameFormat)>
<android.filterpacks.imageproc.DuotoneFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterpacks.imageproc.FillLightFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String,java.lang.String)>
<android.filterpacks.imageproc.DrawRectFilter: void prepare(android.filterfw.core.FilterContext)>
<android.filterfw.core.ShaderProgram: void beginDrawing()>
<android.filterfw.core.ShaderProgram: android.filterfw.core.ShaderProgram createIdentity(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.StraightenFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterpacks.videoproc.BackDropperFilter: void prepare(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.FixedRotationFilter: void process(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.CropRectFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterpacks.imageproc.DrawOverlayFilter: void prepare(android.filterfw.core.FilterContext)>
<android.filterpacks.videosrc.SurfaceTextureTarget: void prepare(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.FlipFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterpacks.imageproc.ResizeFilter: void createProgram(android.filterfw.core.FilterContext,android.filterfw.core.FrameFormat)>
<android.filterpacks.videosink.MediaEncoderFilter: void prepare(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.RotateFilter: void initProgram(android.filterfw.core.FilterContext,int)>
<android.filterpacks.imageproc.ImageSlicer: void process(android.filterfw.core.FilterContext)>
<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>
<android.filterfw.core.ShaderProgram: void setAttributeValues(java.lang.String,android.filterfw.core.VertexFrame,int,int,int,int,boolean)>
<android.filterfw.core.ShaderProgram: void setAttributeValues(java.lang.String,float[],int)>
<android.filterfw.core.ShaderProgram: void setBlendEnabled(boolean)>
<android.filterfw.core.ShaderProgram: void setBlendFunc(int,int)>
<android.filterfw.core.ShaderProgram: void setClearColor(float,float,float)>
<android.filterfw.core.ShaderProgram: void setClearsOutput(boolean)>
<android.filterfw.core.ShaderProgram: void setDrawMode(int)>
<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>
<android.filterfw.core.ShaderProgram: void setVertexCount(int)>
<android.graphics.BitmapRegionDecoder: android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>
<android.app.ActivityThread: android.app.LoadedApk getPackageInfo(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo,int)>
<android.app.TabActivity: void onContentChanged()>
<android.graphics.YuvImage: void <init>(byte[],int,int,int,int[])>
<android.graphics.YuvImage: boolean compressToJpeg(android.graphics.Rect,int,java.io.OutputStream)>
<android.filterfw.core.GLEnvironment: void activate()>
<android.filterfw.core.GLEnvironment: void activateSurfaceWithId(int)>
<android.filterfw.core.GLEnvironment: void deactivate()>
<android.filterfw.core.GLEnvironment: void initWithCurrentContext()>
<android.filterfw.core.GLEnvironment: void initWithNewContext()>
<android.filterfw.MffEnvironment: void createGLEnvironment()>
<android.filterfw.core.GLEnvironment: int registerSurface(android.view.Surface)>
<android.filterfw.core.GLEnvironment: int registerSurfaceFromMediaRecorder(android.media.MediaRecorder)>
<android.filterfw.core.GLEnvironment: void setSurfaceTimestamp(long)>
<android.filterfw.core.GLEnvironment: void swapBuffers()>
<android.filterfw.core.GLEnvironment: void unregisterSurfaceId(int)>
<android.app.Activity: void dismissDialog(int)>
<android.app.Activity: void finishAffinity()>
<android.app.Activity: java.lang.Object getSystemService(java.lang.String)>
<android.app.Activity: void recreate()>
<android.app.Activity: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)>
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent,android.os.Bundle)>
<android.app.backup.BackupDataOutput: void <init>(java.io.FileDescriptor,long,int)>
<android.app.backup.FullBackupDataOutput: void <init>(android.os.ParcelFileDescriptor,long,int)>
<android.app.backup.FullBackupDataOutput: void <init>(android.os.ParcelFileDescriptor,long)>
<android.content.res.AssetManager$AssetInputStream: int getAssetInt()>
<android.hardware.camera2.CaptureRequest$Builder: void <init>(android.hardware.camera2.impl.CameraMetadataNative,boolean,int,java.lang.String,java.util.Set)>
<android.animation.ValueAnimator: void cancel()>
<android.animation.ObjectAnimator: void setTarget(java.lang.Object)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object,android.animation.PropertyValuesHolder[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(java.lang.Object,java.lang.String,android.animation.TypeConverter,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(java.lang.Object,android.util.Property,android.animation.TypeConverter,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(java.lang.Object,android.util.Property,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,java.lang.String,java.lang.String,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,android.util.Property,android.util.Property,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,java.lang.String,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,android.util.Property,android.graphics.Path)>
<android.animation.AnimatorSet: void setTarget(java.lang.Object)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(java.lang.Object,android.util.Property,android.animation.TypeEvaluator,java.lang.Object[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>
<android.transition.Rotate: android.animation.Animator createAnimator(android.view.ViewGroup,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,android.util.Property,int[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(java.lang.Object,java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,java.lang.String,int[])>
<android.animation.ValueAnimator: void end()>
<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>
<android.animation.ValueAnimator: android.animation.Animator setDuration(long)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>
<android.animation.ObjectAnimator: android.animation.ValueAnimator setDuration(long)>
<android.animation.ObjectAnimator: android.animation.Animator setDuration(long)>
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder after(long)>
<android.animation.ObjectAnimator: void start()>
<android.filterpacks.videosink.MediaEncoderFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)>
<android.content.ClipData: void <init>(android.content.ClipDescription,android.content.ClipData$Item)>
<android.content.ClipData: void <init>(android.content.ClipDescription,java.util.ArrayList)>
<android.content.ClipData: void <init>(java.lang.CharSequence,java.lang.String[],android.content.ClipData$Item)>
<android.content.ClipData: android.content.ClipData newUri(android.content.ContentResolver,java.lang.CharSequence,android.net.Uri)>
<android.content.Intent: boolean migrateExtraStreamToClipData()>
<android.content.ClipData: android.content.ClipData newHtmlText(java.lang.CharSequence,java.lang.CharSequence,java.lang.String)>
<android.content.ClipData: android.content.ClipData newIntent(java.lang.CharSequence,android.content.Intent)>
<android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)>
<android.content.ClipboardManager: void setText(java.lang.CharSequence)>
<android.content.ClipData: android.content.ClipData newRawUri(java.lang.CharSequence,android.net.Uri)>
<android.content.ClipData: void addItem(android.content.ClipData$Item)>
<android.content.Intent: void readFromParcel(android.os.Parcel)>
<android.content.Intent: void <init>(android.os.Parcel)>
<android.filterfw.core.VertexFrame: android.graphics.Bitmap getBitmap()>
<android.filterfw.core.VertexFrame: java.nio.ByteBuffer getData()>
<android.filterfw.core.VertexFrame: float[] getFloats()>
<android.filterfw.core.VertexFrame: int[] getInts()>
<android.filterfw.core.VertexFrame: java.lang.Object getObjectValue()>
<android.filterfw.core.VertexFrame: void setBitmap(android.graphics.Bitmap)>
<android.filterfw.core.VertexFrame: void setData(java.nio.ByteBuffer,int,int)>
<android.filterfw.core.VertexFrame: void setFloats(float[])>
<android.filterfw.core.VertexFrame: void setInts(int[])>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setDisallowMetered(boolean)>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setIgnoreSettings(boolean)>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setSyncAdapter(android.accounts.Account,java.lang.String)>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder syncOnce()>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder syncPeriodic(long,long)>
<android.filterpacks.imageproc.AlphaBlendFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)>
<android.location.Address: java.lang.String getAddressLine(int)>
<android.location.Address: double getLatitude()>
<android.location.Address: double getLongitude()>
<android.location.Address: void setAddressLine(int,java.lang.String)>
<android.database.sqlite.SQLiteCustomFunction: void <init>(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CustomFunction)>
<android.database.sqlite.SQLiteDatabase: void addCustomFunction(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CustomFunction)>
<android.app.backup.SharedPreferencesBackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.app.backup.AbsoluteFileBackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.app.backup.FileBackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.filterfw.core.OutputPort: void connectTo(android.filterfw.core.InputPort)>
<android.filterfw.core.OutputPort: android.filterfw.core.Frame pullFrame()>
<android.filterfw.core.OutputPort: void pushFrame(android.filterfw.core.Frame)>
<android.filterfw.core.OutputPort: void setFrame(android.filterfw.core.Frame)>
<android.filterfw.core.Filter: android.filterfw.core.InputPort getInputPort(java.lang.String)>
<android.filterfw.core.Filter: android.filterfw.core.OutputPort getOutputPort(java.lang.String)>
<android.filterfw.core.Filter: void initWithAssignmentString(java.lang.String)>
<android.filterfw.core.Frame: void assertFrameMutable()>
<android.filterfw.core.Frame: android.graphics.Bitmap convertBitmapToRGBA(android.graphics.Bitmap)>
<android.filterfw.core.NativeFrame: void setBitmap(android.graphics.Bitmap)>
<android.filterfw.core.Frame: void setGenericObjectValue(java.lang.Object)>
<android.filterpacks.videosrc.CameraSource: void open(android.filterfw.core.FilterContext)>
<android.graphics.AvoidXfermode: void <init>(int,int,android.graphics.AvoidXfermode$Mode)>
<android.database.BulkCursorToCursorAdaptor: android.os.Bundle getExtras()>
<android.database.BulkCursorToCursorAdaptor: boolean onMove(int,int)>
<android.database.BulkCursorToCursorAdaptor: java.lang.String[] getColumnNames()>
<android.database.BulkCursorToCursorAdaptor: int getCount()>
<android.filterfw.core.NativeProgram: void <init>(java.lang.String,java.lang.String)>
<android.filterpacks.imageproc.ContrastFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.Invert: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.BrightnessFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)>
<android.filterfw.core.NativeProgram: java.lang.Object getHostValue(java.lang.String)>
<android.filterfw.core.NativeProgram: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>
<android.filterfw.core.NativeProgram: void reset()>
<android.filterfw.core.NativeProgram: void setHostValue(java.lang.String,java.lang.Object)>
<android.filterfw.core.NativeProgram: void tearDown()>
<android.ddm.DdmHandleThread: org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)>
<android.content.IntentFilter: android.content.IntentFilter create(java.lang.String,java.lang.String)>
<android.filterfw.core.NativeFrame: android.graphics.Bitmap getBitmap()>
<android.filterfw.core.NativeFrame: java.lang.Object getObjectValue()>
<android.filterfw.core.NativeFrame: void setData(java.nio.ByteBuffer,int,int)>
<android.filterfw.core.NativeFrame: void setDataFromFrame(android.filterfw.core.Frame)>
<android.filterfw.core.NativeFrame: void setFloats(float[])>
<android.filterfw.core.NativeFrame: void setInts(int[])>
<android.view.View: void internalSetPadding(int,int,int,int)>
<android.view.View: void resolvePadding()>
<android.view.View: void setPaddingRelative(int,int,int,int)>
<android.view.View: void recomputePadding()>
<android.view.View: void setPadding(int,int,int,int)>
<android.view.ViewGroup: void internalSetPadding(int,int,int,int)>
<android.view.View: void onAttachedToWindow()>
<android.view.ViewGroup: void onAttachedToWindow()>
<android.webkit.WebView: void onAttachedToWindow()>
<android.widget.ActivityChooserView: void onAttachedToWindow()>
<android.widget.ImageView: void onAttachedToWindow()>
<android.view.View: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.widget.TextView: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.view.View: boolean setFrame(int,int,int,int)>
<android.widget.ImageView: boolean setFrame(int,int,int,int)>
<android.widget.TextView: boolean setFrame(int,int,int,int)>
<android.view.View: void setBottom(int)>
<android.view.View: void setLeft(int)>
<android.view.View: void setRight(int)>
<android.view.View: void setTop(int)>
<android.app.ListActivity: void onContentChanged()>
<android.hardware.Camera: android.hardware.Camera open(int)>
<android.hardware.Camera: android.hardware.Camera open()>
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>
<android.hardware.Camera: void startFaceDetection()>
<android.filterpacks.videosrc.MediaSource: void open(android.filterfw.core.FilterContext)>
<android.filterpacks.videosrc.MediaSource: void process(android.filterfw.core.FilterContext)>
<android.filterpacks.imageproc.ImageCombineFilter: void updateProgramWithTarget(int,android.filterfw.core.FilterContext)>
<android.filterfw.core.StopWatchMap: void stop(java.lang.String)>
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame execute(android.filterfw.core.KeyValueMap)>
<android.app.FragmentBreadCrumbs: void setMaxVisible(int)>
<android.location.Geofence: android.location.Geofence createCircle(double,double,float)>
<android.location.Geofence: java.lang.String toString()>
<android.location.LocationRequest: android.location.LocationRequest setSmallestDisplacement(float)>
<android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>
<android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedCriteria(android.location.Criteria,long,float,boolean)>
<android.location.LocationRequest: android.location.LocationRequest setFastestInterval(long)>
<android.location.LocationRequest: android.location.LocationRequest setInterval(long)>
<android.location.LocationRequest: android.location.LocationRequest setProvider(java.lang.String)>
<android.location.LocationRequest: android.location.LocationRequest setQuality(int)>
<android.location.LocationRequest: android.location.LocationRequest setNumUpdates(int)>
<android.location.Geocoder: void <init>(android.content.Context,java.util.Locale)>
<android.graphics.drawable.LayerDrawable: void <init>(android.graphics.drawable.Drawable[])>
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable getDrawable(int)>
<android.graphics.drawable.LayerDrawable: int getId(int)>
<android.drm.DrmSupportInfo: void addFileSuffix(java.lang.String)>
<android.drm.DrmSupportInfo: void addMimeType(java.lang.String)>
<android.drm.DrmSupportInfo: void setDescription(java.lang.String)>
<android.content.ClipData$Item: void <init>(java.lang.CharSequence,java.lang.String,android.content.Intent,android.net.Uri)>
<android.filterpacks.imageproc.SimpleImageFilter: void updateProgramWithTarget(int,android.filterfw.core.FilterContext)>
<android.database.DatabaseUtils: void readExceptionFromParcel(android.os.Parcel)>
<android.animation.ObjectAnimator: void setupEndValues()>
<android.animation.ObjectAnimator: void setupStartValues()>
<android.filterfw.core.FilterContext: void initGLEnvironment(android.filterfw.core.GLEnvironment)>
<android.filterfw.core.FilterContext: void setFrameManager(android.filterfw.core.FrameManager)>
<android.graphics.Path: void addRoundRect(float,float,float,float,float[],android.graphics.Path$Direction)>
<android.graphics.Path: void addRoundRect(android.graphics.RectF,float[],android.graphics.Path$Direction)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeConverter,android.graphics.Path)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeConverter,android.graphics.Path)>
<android.filterpacks.base.OutputStreamTarget: void process(android.filterfw.core.FilterContext)>
<android.database.DatabaseUtils$InsertHelper: long execute()>
<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)>
<android.filterpacks.ui.SurfaceRenderFilter: void process(android.filterfw.core.FilterContext)>
<android.filterpacks.ui.SurfaceRenderFilter: void updateRenderMode()>
<android.filterfw.io.PatternScanner: java.lang.String eat(java.util.regex.Pattern,java.lang.String)>
<android.hardware.display.WifiDisplayStatus: void <init>(int,int,int,android.hardware.display.WifiDisplay,android.hardware.display.WifiDisplay[],android.hardware.display.WifiDisplaySessionInfo)>
<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long,android.os.Bundle)>
<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>
<android.graphics.TableMaskFilter: void <init>(byte[])>
<android.filterpacks.videosrc.SurfaceTextureTarget: void updateRenderMode()>
<android.hardware.input.InputManager: android.view.InputDevice getInputDeviceByDescriptor(java.lang.String)>
<android.hardware.input.InputManager: void registerInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener,android.os.Handler)>
<android.hardware.input.InputManager: void setPointerSpeed(android.content.Context,int)>
<android.hardware.input.InputManager: void unregisterInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener)>
<android.ddm.DdmHandleHeap: org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)>
<android.graphics.Matrix: void mapPoints(float[],int,float[],int,int)>
<android.graphics.Matrix: void mapPoints(float[])>
<android.gesture.OrientedBoundingBox: android.graphics.Path toPath()>
<android.view.ViewGroup: boolean isTransformedTouchPointInView(float,float,android.view.View,android.graphics.PointF)>
<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point,boolean)>
<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>
<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)>
<android.graphics.Matrix: void mapVectors(float[],int,float[],int,int)>
<android.graphics.Matrix: void getValues(float[])>
<android.graphics.Matrix: void toShortString(java.lang.StringBuilder)>
<android.graphics.Matrix: java.lang.String toString()>
<android.graphics.Matrix: void mapPoints(float[],float[])>
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>
<android.view.animation.Animation: void getInvalidateRegion(int,int,int,int,android.graphics.RectF,android.view.animation.Transformation)>
<android.view.View: void getBoundsOnScreen(android.graphics.Rect,boolean)>
<android.view.View: void getBoundsOnScreen(android.graphics.Rect)>
<android.view.View: void getHitRect(android.graphics.Rect)>
<android.widget.AbsListView: int pointToPosition(int,int)>
<android.view.ViewGroup: void invalidateChild(android.view.View,android.graphics.Rect)>
<android.graphics.Matrix: void mapVectors(float[],float[])>
<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>
<android.graphics.Matrix: void setValues(float[])>
<android.graphics.PixelFormat: void getPixelFormatInfo(int,android.graphics.PixelFormat)>
<android.drm.DrmManagerClient: android.drm.DrmInfo acquireDrmInfo(android.drm.DrmInfoRequest)>
<android.drm.DrmManagerClient: boolean canHandle(android.net.Uri,java.lang.String)>
<android.drm.DrmManagerClient: boolean canHandle(java.lang.String,java.lang.String)>
<android.drm.DrmManagerClient: int checkRightsStatus(android.net.Uri)>
<android.drm.DrmManagerClient: int checkRightsStatus(android.net.Uri,int)>
<android.drm.DrmManagerClient: int checkRightsStatus(java.lang.String,int)>
<android.drm.DrmManagerClient: android.drm.DrmConvertedStatus convertData(int,byte[])>
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(android.net.Uri,int)>
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(java.lang.String,int)>
<android.drm.DrmManagerClient: int getDrmObjectType(android.net.Uri,java.lang.String)>
<android.drm.DrmManagerClient: int getDrmObjectType(java.lang.String,java.lang.String)>
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(android.net.Uri)>
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(java.lang.String)>
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(android.net.Uri)>
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(java.lang.String)>
<android.drm.DrmManagerClient: void installDrmEngine(java.lang.String)>
<android.drm.DrmManagerClient: int openConvertSession(java.lang.String)>
<android.drm.DrmManagerClient: int processDrmInfo(android.drm.DrmInfo)>
<android.drm.DrmManagerClient: int removeRights(android.net.Uri)>
<android.drm.DrmManagerClient: int removeRights(java.lang.String)>
<android.app.Notification$Style: void checkBuilder()>
<android.location.Country: void <init>(java.lang.String,int)>
<android.graphics.Picture: void <init>(long)>
<android.graphics.Picture: android.graphics.Picture createFromStream(java.io.InputStream)>
<android.graphics.Picture: void <init>()>
<android.graphics.Picture: void draw(android.graphics.Canvas)>
<android.graphics.Picture: void endRecording()>
<android.graphics.Picture: int getHeight()>
<android.graphics.Picture: int getWidth()>
<android.graphics.Picture: void writeToStream(java.io.OutputStream)>
<android.ddm.DdmHandleNativeHeap: org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)>
<android.drm.DrmInfoStatus: void <init>(int,int,android.drm.ProcessedData,java.lang.String)>
<android.app.UiAutomationConnection: void connect(android.accessibilityservice.IAccessibilityServiceClient,int)>
<android.filterfw.core.ProgramVariable: java.lang.Object getValue()>
<android.filterfw.core.ProgramVariable: void setValue(java.lang.Object)>
<android.ddm.DdmHandleHello: org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)>
<android.app.MediaRouteButton: boolean performClick()>
<android.filterpacks.imageproc.ToGrayFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)>
<android.content.UndoManager: void beginUpdate(java.lang.CharSequence)>
<android.widget.TextView: void onCommitCorrection(android.view.inputmethod.CorrectionInfo)>
<android.content.UndoManager: boolean hasOperation(android.content.UndoOwner)>
<android.content.UndoManager: int redo(android.content.UndoOwner[],int)>
<android.content.UndoManager: void restoreInstanceState(android.os.Parcel,java.lang.ClassLoader)>
<android.content.UndoManager: void saveInstanceState(android.os.Parcel)>
<android.content.UndoManager: void setUndoLabel(java.lang.CharSequence)>
<android.content.UndoManager: void suggestUndoLabel(java.lang.CharSequence)>
<android.content.UndoManager: int undo(android.content.UndoOwner[],int)>
<android.graphics.ColorMatrix: void setRotate(int,float)>
<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>
<android.filterfw.core.SimpleFrame: void setGenericObjectValue(java.lang.Object)>
<android.filterpacks.base.CallbackFilter: void process(android.filterfw.core.FilterContext)>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newUpdate(android.net.Uri)>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newAssertQuery(android.net.Uri)>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newDelete(android.net.Uri)>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newInsert(android.net.Uri)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation build()>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withExpectedCount(int)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withSelection(java.lang.String,java.lang.String[])>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withSelectionBackReference(int,int)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValueBackReferences(android.content.ContentValues)>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback,int,boolean,int,android.os.Handler)>
<android.bluetooth.BluetoothDevice: boolean createBond(int)>
<android.graphics.pdf.PdfDocument$PageInfo$Builder: void <init>(int,int,int)>
<android.print.pdf.PrintedPdfDocument: android.graphics.pdf.PdfDocument$Page startPage(int)>
<android.graphics.pdf.PdfDocument$PageInfo$Builder: android.graphics.pdf.PdfDocument$PageInfo$Builder setContentRect(android.graphics.Rect)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>
<android.graphics.Bitmap: void copyPixelsFromBuffer(java.nio.Buffer)>
<android.graphics.Bitmap: void copyPixelsToBuffer(java.nio.Buffer)>
<android.app.LauncherActivity$IconResizer: android.graphics.drawable.Drawable createIconThumbnail(android.graphics.drawable.Drawable)>
<android.graphics.Bitmap: void eraseColor(int)>
<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])>
<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: boolean sameAs(android.graphics.Bitmap)>
<android.graphics.Bitmap: void setPixel(int,int,int)>
<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)>
<android.graphics.Bitmap: void writeToParcel(android.os.Parcel,int)>
<android.content.CursorEntityIterator: void close()>
<android.content.CursorEntityIterator: boolean hasNext()>
<android.content.CursorEntityIterator: android.content.Entity next()>
<android.content.CursorEntityIterator: void remove()>
<android.content.CursorEntityIterator: void reset()>
<android.content.SearchRecentSuggestionsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.SearchRecentSuggestionsProvider: java.lang.String getType(android.net.Uri)>
<android.content.SearchRecentSuggestionsProvider: boolean onCreate()>
<android.content.SearchRecentSuggestionsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.SearchRecentSuggestionsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.filterfw.MffEnvironment: void activateGLEnvironment()>
<android.filterfw.MffEnvironment: void deactivateGLEnvironment()>
<android.drm.DrmConvertedStatus: void <init>(int,byte[],int)>
<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.Handler,android.os.UserHandle)>
<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>
<android.content.Context: int startActivitiesAsUser(android.content.Intent[],android.os.Bundle,android.os.UserHandle)>
<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)>
<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.res.Configuration: void <init>()>
<android.content.res.Configuration: void setToDefaults()>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle bigLargeIcon(android.graphics.Bitmap)>
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>
<android.app.Notification$Action: void <init>(int,java.lang.CharSequence,android.app.PendingIntent)>
<android.app.Notification$Action: android.app.Notification$Action clone()>
<android.app.Notification$Action: java.lang.Object clone()>
<android.app.Notification$Action: void writeToParcel(android.os.Parcel,int)>
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(android.graphics.drawable.Icon)>
<android.app.Notification: void <init>(android.os.Parcel)>
<android.service.notification.StatusBarNotification: void <init>(android.os.Parcel)>
<android.database.sqlite.SQLiteSession: void <init>(android.database.sqlite.SQLiteConnectionPool)>
<android.database.sqlite.SQLiteSession: void endTransaction(android.os.CancellationSignal)>
<android.database.sqlite.SQLiteSession: long executeForLastInsertedRowId(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteSession: int executeForChangedRowCount(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteSession: int executeForCursorWindow(java.lang.String,java.lang.Object[],android.database.CursorWindow,int,int,boolean,int,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteSession: void execute(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteSession: android.os.ParcelFileDescriptor executeForBlobFileDescriptor(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteSession: long executeForLong(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteSession: java.lang.String executeForString(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteSession: void prepare(java.lang.String,int,android.os.CancellationSignal,android.database.sqlite.SQLiteStatementInfo)>
<android.database.sqlite.SQLiteSession: void setTransactionSuccessful()>
<android.database.sqlite.SQLiteSession: void beginTransaction(int,android.database.sqlite.SQLiteTransactionListener,int,android.os.CancellationSignal)>
<android.bluetooth.BluetoothGatt: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothGatt: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothGatt: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.app.DownloadManager$Request: void <init>(android.net.Uri)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request addRequestHeader(java.lang.String,java.lang.String)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDestinationInExternalFilesDir(android.content.Context,java.lang.String,java.lang.String)>
<android.hardware.SystemSensorManager: boolean flushImpl(android.hardware.SensorEventListener)>
<android.hardware.SystemSensorManager: boolean registerListenerImpl(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler,int,int)>
<android.hardware.SystemSensorManager: boolean requestTriggerSensorImpl(android.hardware.TriggerEventListener,android.hardware.Sensor)>
<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>
<android.hardware.camera2.CameraCharacteristics: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>
<android.hardware.camera2.impl.CameraMetadataNative: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>
<android.content.ContentResolver: void appNotRespondingViaProvider(android.content.IContentProvider)>
<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentResolver: void validateSyncExtrasBundle(android.os.Bundle)>
<android.filterfw.core.FilterFactory: android.filterfw.core.Filter createFilterByClass(java.lang.Class,java.lang.String)>
<android.filterfw.FilterFunctionEnvironment: android.filterfw.core.FilterFunction createFunction(java.lang.Class,java.lang.Object[])>
<android.media.effect.SingleFilterEffect: void <init>(android.media.effect.EffectContext,java.lang.String,java.lang.Class,java.lang.String,java.lang.String,java.lang.Object[])>
<android.filterfw.core.FilterFactory: android.filterfw.core.Filter createFilterByClassName(java.lang.String,java.lang.String)>
<android.content.ClipDescription: void <init>(java.lang.CharSequence,java.lang.String[])>
<android.content.ClipDescription: void validate()>
<android.content.res.Resources: java.lang.CharSequence getText(int)>
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultJournalMode()>
<android.content.Context: java.lang.String getString(int)>
<android.database.sqlite.SQLiteGlobal: java.lang.String getWALSyncMode()>
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultSyncMode()>
<android.content.Context: java.lang.CharSequence getText(int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPatch(android.graphics.NinePatch,android.graphics.Rect,android.graphics.Paint)>
<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect,android.graphics.Paint)>
<android.drm.DrmRights: void <init>(android.drm.ProcessedData,java.lang.String)>
<android.ddm.DdmHandleProfiling: org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)>
<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>
<android.database.AbstractCursor: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.BaseAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.BaseAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.appwidget.AppWidgetHost: int allocateAppWidgetId()>
<android.appwidget.AppWidgetHost: android.appwidget.AppWidgetHostView createView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)>
<android.appwidget.AppWidgetHost: void deleteAllHosts()>
<android.appwidget.AppWidgetHost: void deleteHost()>
<android.appwidget.AppWidgetHost: int[] getAppWidgetIds()>
<android.appwidget.AppWidgetHost: void startListening()>
<android.appwidget.AppWidgetHost: void stopListening()>
<android.graphics.DashPathEffect: void <init>(float[],float)>
<android.graphics.drawable.GradientDrawable: void <init>()>
<android.graphics.drawable.GradientDrawable: android.graphics.drawable.Drawable mutate()>
<android.graphics.drawable.GradientDrawable: void setStroke(int,android.content.res.ColorStateList,float,float)>
<android.graphics.drawable.GradientDrawable: void setStroke(int,android.content.res.ColorStateList)>
<android.filterfw.core.FrameFormat: boolean hasMetaKey(java.lang.String,java.lang.Class)>
<android.filterfw.core.FrameFormat: int readTargetString(java.lang.String)>
<android.filterpacks.base.InputStreamSource: void setupPorts()>
<android.filterpacks.base.RetargetFilter: void setupPorts()>
<android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])>
<android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])>
<android.graphics.Paint: int breakText(char[],int,int,float,float[])>
<android.graphics.Paint: void getTextBounds(java.lang.CharSequence,int,int,android.graphics.Rect)>
<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)>
<android.graphics.Paint: void getTextBounds(char[],int,int,android.graphics.Rect)>
<android.graphics.Paint: void getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)>
<android.graphics.Paint: void getTextPath(char[],int,int,float,float,android.graphics.Path)>
<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,boolean,float[],int)>
<android.graphics.Paint: int getTextRunCursor(java.lang.String,int,int,boolean,int,int)>
<android.graphics.Paint: int getTextRunCursor(java.lang.CharSequence,int,int,boolean,int,int)>
<android.graphics.Paint: int getTextRunCursor(char[],int,int,boolean,int,int)>
<android.graphics.Paint: int getTextWidths(java.lang.CharSequence,int,int,float[])>
<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>
<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>
<android.graphics.Paint: float measureText(java.lang.CharSequence,int,int)>
<android.graphics.Paint: float measureText(java.lang.String)>
<android.graphics.Paint: float measureText(java.lang.String,int,int)>
<android.graphics.Paint: float measureText(char[],int,int)>
<android.graphics.Paint: void setBidiFlags(int)>
<android.graphics.Paint: void <init>(int)>
<android.graphics.Paint: void <init>()>
<android.view.ViewGroup: void onDebugDraw(android.graphics.Canvas)>
<android.widget.GridLayout: void onDebugDraw(android.graphics.Canvas)>
<android.gesture.GestureOverlayView: void <init>(android.content.Context)>
<android.gesture.GestureOverlayView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.filterpacks.imageproc.RedEyeFilter: void <init>(java.lang.String)>
<android.inputmethodservice.KeyboardView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.graphics.drawable.NinePatchDrawable: android.graphics.Paint getPaint()>
<android.graphics.drawable.NinePatchDrawable: void setFilterBitmap(boolean)>
<android.graphics.drawable.NinePatchDrawable: int getAlpha()>
<android.graphics.drawable.NinePatchDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.NinePatchDrawable: void setDither(boolean)>
<android.widget.ListView: void setCacheColorHint(int)>
<android.text.TextPaint: void <init>()>
<android.text.TextLine: void <init>()>
<android.graphics.drawable.ShapeDrawable: void <init>(android.graphics.drawable.shapes.Shape)>
<android.graphics.drawable.ShapeDrawable: void <init>()>
<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.Bitmap)>
<android.text.style.ImageSpan: void <init>(android.content.Context,android.graphics.Bitmap,int)>
<android.graphics.drawable.BitmapDrawable: void <init>()>
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources)>
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,java.io.InputStream)>
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,java.lang.String)>
<android.text.TextPaint: void <init>(int)>
<android.widget.Switch: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.graphics.drawable.ColorDrawable: void <init>()>
<android.graphics.drawable.ColorDrawable: void <init>(int)>
<android.graphics.Paint: void reset()>
<android.content.pm.Signature: void <init>(java.lang.String)>
<android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)>
<android.app.DownloadManager$Query: android.app.DownloadManager$Query orderBy(java.lang.String,int)>
<android.filterfw.core.SimpleFrameManager: android.filterfw.core.Frame releaseFrame(android.filterfw.core.Frame)>
<android.graphics.Interpolator: void setKeyFrame(int,int,float[],float[])>
<android.graphics.Interpolator: void setKeyFrame(int,int,float[])>
<android.graphics.Interpolator: android.graphics.Interpolator$Result timeToValues(int,float[])>
<android.graphics.Interpolator: android.graphics.Interpolator$Result timeToValues(float[])>
<android.view.View: void onDrawScrollBars(android.graphics.Canvas)>
<android.database.CursorWindow: void <init>(java.lang.String,long)>
<android.database.CursorWindow: void <init>(java.lang.String)>
<android.database.AbstractWindowedCursor: void clearOrCreateWindow(java.lang.String)>
<android.database.CursorWindow: void copyStringToBuffer(int,int,android.database.CharArrayBuffer)>
<android.filterfw.core.InputPort: void setSourcePort(android.filterfw.core.OutputPort)>
<android.inputmethodservice.InputMethodService: boolean enableHardwareAcceleration()>
<android.inputmethodservice.InputMethodService: void setTheme(int)>
<android.app.DownloadManager: int markRowDeleted(long[])>
<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>
<android.filterfw.core.NativeBuffer: void assertReadable()>
<android.filterfw.core.NativeBuffer: void assertWritable()>
<android.filterfw.core.NativeBuffer: android.filterfw.core.NativeBuffer mutableCopy()>
<android.hardware.display.DisplayManagerGlobal: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>
<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>
<android.hardware.display.DisplayManagerGlobal: void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)>
<android.hardware.display.DisplayManager: void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)>
<android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File,boolean)>
<android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)>
<android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)>
<android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)>
<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)>
<android.content.SyncResult: void clear()>
<android.database.sqlite.SQLiteOpenHelper: void onDowngrade(android.database.sqlite.SQLiteDatabase,int,int)>
<android.graphics.EmbossMaskFilter: void <init>(float[],float,float,float)>
<android.app.LoadedApk: android.content.res.Resources getResources()>
<android.app.LoadedApk: android.content.res.AssetManager getAssets()>
<android.app.LoadedApk: android.app.Application makeApplication(boolean,android.app.Instrumentation)>
<android.filterfw.core.SyncRunner: void <init>(android.filterfw.core.FilterContext,android.filterfw.core.FilterGraph,java.lang.Class)>
<android.filterfw.core.SyncRunner: void processFilterNode(android.filterfw.core.Filter)>
<android.filterfw.core.SyncRunner: int step()>
<android.filterfw.core.SyncRunner: void stop()>
<android.filterfw.core.CachedFrameManager: android.filterfw.core.Frame releaseFrame(android.filterfw.core.Frame)>
<android.graphics.ColorMatrixColorFilter: void <init>(float[])>
<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence)>
<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)>
<android.app.Fragment: android.app.LoaderManager getLoaderManager()>
<android.app.Fragment: android.content.res.Resources getResources()>
<android.app.Fragment: void setArguments(android.os.Bundle)>
<android.app.Fragment: void setInitialSavedState(android.app.Fragment$SavedState)>
<android.app.Fragment: void setTargetFragment(android.app.Fragment,int)>
<android.app.Fragment: void startActivity(android.content.Intent,android.os.Bundle)>
<android.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>
<android.animation.AnimatorSet: void cancel()>
<android.animation.AnimatorSet: void pause()>
<android.animation.AnimatorSet: android.animation.AnimatorSet setDuration(long)>
<android.animation.AnimatorSet: android.animation.Animator setDuration(long)>